<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="954" onload="init(evt)" viewBox="0 0 1200 954" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="954" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile_8_worker.svg -- python main.py --template draftrec --./data/lol/user_history.npy --use_parallel true</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="943.00"> </text><svg id="frames" x="10" width="1180" total_samples="119386"><g><title>&lt;module&gt; (main.py:15) (191 samples, 0.16%)</title><rect x="0.0050%" y="68" width="0.1600%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="191"/><text x="0.2550%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (191 samples, 0.16%)</title><rect x="0.0050%" y="84" width="0.1600%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="191"/><text x="0.2550%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (191 samples, 0.16%)</title><rect x="0.0050%" y="100" width="0.1600%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="191"/><text x="0.2550%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (191 samples, 0.16%)</title><rect x="0.0050%" y="116" width="0.1600%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="191"/><text x="0.2550%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (191 samples, 0.16%)</title><rect x="0.0050%" y="132" width="0.1600%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="191"/><text x="0.2550%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (191 samples, 0.16%)</title><rect x="0.0050%" y="148" width="0.1600%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="191"/><text x="0.2550%" y="158.50"></text></g><g><title>&lt;module&gt; (src/dataloaders/__init__.py:1) (191 samples, 0.16%)</title><rect x="0.0050%" y="164" width="0.1600%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="191"/><text x="0.2550%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (191 samples, 0.16%)</title><rect x="0.0050%" y="180" width="0.1600%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="191"/><text x="0.2550%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (191 samples, 0.16%)</title><rect x="0.0050%" y="196" width="0.1600%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="191"/><text x="0.2550%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (191 samples, 0.16%)</title><rect x="0.0050%" y="212" width="0.1600%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="191"/><text x="0.2550%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (191 samples, 0.16%)</title><rect x="0.0050%" y="228" width="0.1600%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="191"/><text x="0.2550%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (191 samples, 0.16%)</title><rect x="0.0050%" y="244" width="0.1600%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="191"/><text x="0.2550%" y="254.50"></text></g><g><title>&lt;module&gt; (src/dataloaders/base.py:1) (191 samples, 0.16%)</title><rect x="0.0050%" y="260" width="0.1600%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="191"/><text x="0.2550%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (191 samples, 0.16%)</title><rect x="0.0050%" y="276" width="0.1600%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="191"/><text x="0.2550%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (191 samples, 0.16%)</title><rect x="0.0050%" y="292" width="0.1600%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="191"/><text x="0.2550%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (191 samples, 0.16%)</title><rect x="0.0050%" y="308" width="0.1600%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="191"/><text x="0.2550%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (191 samples, 0.16%)</title><rect x="0.0050%" y="324" width="0.1600%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="191"/><text x="0.2550%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (191 samples, 0.16%)</title><rect x="0.0050%" y="340" width="0.1600%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="191"/><text x="0.2550%" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (191 samples, 0.16%)</title><rect x="0.0050%" y="356" width="0.1600%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="191"/><text x="0.2550%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (191 samples, 0.16%)</title><rect x="0.0050%" y="372" width="0.1600%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="191"/><text x="0.2550%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (191 samples, 0.16%)</title><rect x="0.0050%" y="388" width="0.1600%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="191"/><text x="0.2550%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (191 samples, 0.16%)</title><rect x="0.0050%" y="404" width="0.1600%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="191"/><text x="0.2550%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (191 samples, 0.16%)</title><rect x="0.0050%" y="420" width="0.1600%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="191"/><text x="0.2550%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (191 samples, 0.16%)</title><rect x="0.0050%" y="436" width="0.1600%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="191"/><text x="0.2550%" y="446.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:11) (140 samples, 0.12%)</title><rect x="0.2437%" y="740" width="0.1173%" height="15" fill="rgb(241,131,45)" fg:x="291" fg:w="140"/><text x="0.4937%" y="750.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (140 samples, 0.12%)</title><rect x="0.2437%" y="756" width="0.1173%" height="15" fill="rgb(249,31,29)" fg:x="291" fg:w="140"/><text x="0.4937%" y="766.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (140 samples, 0.12%)</title><rect x="0.2437%" y="772" width="0.1173%" height="15" fill="rgb(225,111,53)" fg:x="291" fg:w="140"/><text x="0.4937%" y="782.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (140 samples, 0.12%)</title><rect x="0.2437%" y="788" width="0.1173%" height="15" fill="rgb(238,160,17)" fg:x="291" fg:w="140"/><text x="0.4937%" y="798.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (140 samples, 0.12%)</title><rect x="0.2437%" y="804" width="0.1173%" height="15" fill="rgb(214,148,48)" fg:x="291" fg:w="140"/><text x="0.4937%" y="814.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (140 samples, 0.12%)</title><rect x="0.2437%" y="820" width="0.1173%" height="15" fill="rgb(232,36,49)" fg:x="291" fg:w="140"/><text x="0.4937%" y="830.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/_chunking.py:8) (140 samples, 0.12%)</title><rect x="0.2437%" y="836" width="0.1173%" height="15" fill="rgb(209,103,24)" fg:x="291" fg:w="140"/><text x="0.4937%" y="846.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (140 samples, 0.12%)</title><rect x="0.2437%" y="852" width="0.1173%" height="15" fill="rgb(229,88,8)" fg:x="291" fg:w="140"/><text x="0.4937%" y="862.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (140 samples, 0.12%)</title><rect x="0.2437%" y="868" width="0.1173%" height="15" fill="rgb(213,181,19)" fg:x="291" fg:w="140"/><text x="0.4937%" y="878.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (140 samples, 0.12%)</title><rect x="0.2437%" y="884" width="0.1173%" height="15" fill="rgb(254,191,54)" fg:x="291" fg:w="140"/><text x="0.4937%" y="894.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (140 samples, 0.12%)</title><rect x="0.2437%" y="900" width="0.1173%" height="15" fill="rgb(241,83,37)" fg:x="291" fg:w="140"/><text x="0.4937%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (140 samples, 0.12%)</title><rect x="0.2437%" y="916" width="0.1173%" height="15" fill="rgb(233,36,39)" fg:x="291" fg:w="140"/><text x="0.4937%" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (156 samples, 0.13%)</title><rect x="0.2437%" y="388" width="0.1307%" height="15" fill="rgb(226,3,54)" fg:x="291" fg:w="156"/><text x="0.4937%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (156 samples, 0.13%)</title><rect x="0.2437%" y="404" width="0.1307%" height="15" fill="rgb(245,192,40)" fg:x="291" fg:w="156"/><text x="0.4937%" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (156 samples, 0.13%)</title><rect x="0.2437%" y="420" width="0.1307%" height="15" fill="rgb(238,167,29)" fg:x="291" fg:w="156"/><text x="0.4937%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (156 samples, 0.13%)</title><rect x="0.2437%" y="436" width="0.1307%" height="15" fill="rgb(232,182,51)" fg:x="291" fg:w="156"/><text x="0.4937%" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (156 samples, 0.13%)</title><rect x="0.2437%" y="452" width="0.1307%" height="15" fill="rgb(231,60,39)" fg:x="291" fg:w="156"/><text x="0.4937%" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (156 samples, 0.13%)</title><rect x="0.2437%" y="468" width="0.1307%" height="15" fill="rgb(208,69,12)" fg:x="291" fg:w="156"/><text x="0.4937%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (156 samples, 0.13%)</title><rect x="0.2437%" y="484" width="0.1307%" height="15" fill="rgb(235,93,37)" fg:x="291" fg:w="156"/><text x="0.4937%" y="494.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:84) (156 samples, 0.13%)</title><rect x="0.2437%" y="500" width="0.1307%" height="15" fill="rgb(213,116,39)" fg:x="291" fg:w="156"/><text x="0.4937%" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (156 samples, 0.13%)</title><rect x="0.2437%" y="516" width="0.1307%" height="15" fill="rgb(222,207,29)" fg:x="291" fg:w="156"/><text x="0.4937%" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (156 samples, 0.13%)</title><rect x="0.2437%" y="532" width="0.1307%" height="15" fill="rgb(206,96,30)" fg:x="291" fg:w="156"/><text x="0.4937%" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (156 samples, 0.13%)</title><rect x="0.2437%" y="548" width="0.1307%" height="15" fill="rgb(218,138,4)" fg:x="291" fg:w="156"/><text x="0.4937%" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (156 samples, 0.13%)</title><rect x="0.2437%" y="564" width="0.1307%" height="15" fill="rgb(250,191,14)" fg:x="291" fg:w="156"/><text x="0.4937%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (156 samples, 0.13%)</title><rect x="0.2437%" y="580" width="0.1307%" height="15" fill="rgb(239,60,40)" fg:x="291" fg:w="156"/><text x="0.4937%" y="590.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:19) (156 samples, 0.13%)</title><rect x="0.2437%" y="596" width="0.1307%" height="15" fill="rgb(206,27,48)" fg:x="291" fg:w="156"/><text x="0.4937%" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (156 samples, 0.13%)</title><rect x="0.2437%" y="612" width="0.1307%" height="15" fill="rgb(225,35,8)" fg:x="291" fg:w="156"/><text x="0.4937%" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (156 samples, 0.13%)</title><rect x="0.2437%" y="628" width="0.1307%" height="15" fill="rgb(250,213,24)" fg:x="291" fg:w="156"/><text x="0.4937%" y="638.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (156 samples, 0.13%)</title><rect x="0.2437%" y="644" width="0.1307%" height="15" fill="rgb(247,123,22)" fg:x="291" fg:w="156"/><text x="0.4937%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (156 samples, 0.13%)</title><rect x="0.2437%" y="660" width="0.1307%" height="15" fill="rgb(231,138,38)" fg:x="291" fg:w="156"/><text x="0.4937%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (156 samples, 0.13%)</title><rect x="0.2437%" y="676" width="0.1307%" height="15" fill="rgb(231,145,46)" fg:x="291" fg:w="156"/><text x="0.4937%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (156 samples, 0.13%)</title><rect x="0.2437%" y="692" width="0.1307%" height="15" fill="rgb(251,118,11)" fg:x="291" fg:w="156"/><text x="0.4937%" y="702.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (156 samples, 0.13%)</title><rect x="0.2437%" y="708" width="0.1307%" height="15" fill="rgb(217,147,25)" fg:x="291" fg:w="156"/><text x="0.4937%" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (156 samples, 0.13%)</title><rect x="0.2437%" y="724" width="0.1307%" height="15" fill="rgb(247,81,37)" fg:x="291" fg:w="156"/><text x="0.4937%" y="734.50"></text></g><g><title>&lt;module&gt; (src/trainers/__init__.py:1) (255 samples, 0.21%)</title><rect x="0.1675%" y="164" width="0.2136%" height="15" fill="rgb(209,12,38)" fg:x="200" fg:w="255"/><text x="0.4175%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (255 samples, 0.21%)</title><rect x="0.1675%" y="180" width="0.2136%" height="15" fill="rgb(227,1,9)" fg:x="200" fg:w="255"/><text x="0.4175%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (255 samples, 0.21%)</title><rect x="0.1675%" y="196" width="0.2136%" height="15" fill="rgb(248,47,43)" fg:x="200" fg:w="255"/><text x="0.4175%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (255 samples, 0.21%)</title><rect x="0.1675%" y="212" width="0.2136%" height="15" fill="rgb(221,10,30)" fg:x="200" fg:w="255"/><text x="0.4175%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (255 samples, 0.21%)</title><rect x="0.1675%" y="228" width="0.2136%" height="15" fill="rgb(210,229,1)" fg:x="200" fg:w="255"/><text x="0.4175%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (255 samples, 0.21%)</title><rect x="0.1675%" y="244" width="0.2136%" height="15" fill="rgb(222,148,37)" fg:x="200" fg:w="255"/><text x="0.4175%" y="254.50"></text></g><g><title>&lt;module&gt; (src/trainers/base.py:2) (164 samples, 0.14%)</title><rect x="0.2437%" y="260" width="0.1374%" height="15" fill="rgb(234,67,33)" fg:x="291" fg:w="164"/><text x="0.4937%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (164 samples, 0.14%)</title><rect x="0.2437%" y="276" width="0.1374%" height="15" fill="rgb(247,98,35)" fg:x="291" fg:w="164"/><text x="0.4937%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (164 samples, 0.14%)</title><rect x="0.2437%" y="292" width="0.1374%" height="15" fill="rgb(247,138,52)" fg:x="291" fg:w="164"/><text x="0.4937%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (164 samples, 0.14%)</title><rect x="0.2437%" y="308" width="0.1374%" height="15" fill="rgb(213,79,30)" fg:x="291" fg:w="164"/><text x="0.4937%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (164 samples, 0.14%)</title><rect x="0.2437%" y="324" width="0.1374%" height="15" fill="rgb(246,177,23)" fg:x="291" fg:w="164"/><text x="0.4937%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (164 samples, 0.14%)</title><rect x="0.2437%" y="340" width="0.1374%" height="15" fill="rgb(230,62,27)" fg:x="291" fg:w="164"/><text x="0.4937%" y="350.50"></text></g><g><title>&lt;module&gt; (src/common/metrics.py:2) (164 samples, 0.14%)</title><rect x="0.2437%" y="356" width="0.1374%" height="15" fill="rgb(216,154,8)" fg:x="291" fg:w="164"/><text x="0.4937%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (164 samples, 0.14%)</title><rect x="0.2437%" y="372" width="0.1374%" height="15" fill="rgb(244,35,45)" fg:x="291" fg:w="164"/><text x="0.4937%" y="382.50"></text></g><g><title>&lt;module&gt; (main.py:17) (256 samples, 0.21%)</title><rect x="0.1675%" y="68" width="0.2144%" height="15" fill="rgb(251,115,12)" fg:x="200" fg:w="256"/><text x="0.4175%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (256 samples, 0.21%)</title><rect x="0.1675%" y="84" width="0.2144%" height="15" fill="rgb(240,54,50)" fg:x="200" fg:w="256"/><text x="0.4175%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (256 samples, 0.21%)</title><rect x="0.1675%" y="100" width="0.2144%" height="15" fill="rgb(233,84,52)" fg:x="200" fg:w="256"/><text x="0.4175%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (256 samples, 0.21%)</title><rect x="0.1675%" y="116" width="0.2144%" height="15" fill="rgb(207,117,47)" fg:x="200" fg:w="256"/><text x="0.4175%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (256 samples, 0.21%)</title><rect x="0.1675%" y="132" width="0.2144%" height="15" fill="rgb(249,43,39)" fg:x="200" fg:w="256"/><text x="0.4175%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (256 samples, 0.21%)</title><rect x="0.1675%" y="148" width="0.2144%" height="15" fill="rgb(209,38,44)" fg:x="200" fg:w="256"/><text x="0.4175%" y="158.50"></text></g><g><title>&lt;module&gt; (torch/_dynamo/__init__.py:3) (138 samples, 0.12%)</title><rect x="0.4205%" y="292" width="0.1156%" height="15" fill="rgb(236,212,23)" fg:x="502" fg:w="138"/><text x="0.6705%" y="302.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1232) (138 samples, 0.12%)</title><rect x="0.4205%" y="308" width="0.1156%" height="15" fill="rgb(242,79,21)" fg:x="502" fg:w="138"/><text x="0.6705%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (138 samples, 0.12%)</title><rect x="0.4205%" y="324" width="0.1156%" height="15" fill="rgb(211,96,35)" fg:x="502" fg:w="138"/><text x="0.6705%" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (138 samples, 0.12%)</title><rect x="0.4205%" y="340" width="0.1156%" height="15" fill="rgb(253,215,40)" fg:x="502" fg:w="138"/><text x="0.6705%" y="350.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (138 samples, 0.12%)</title><rect x="0.4205%" y="356" width="0.1156%" height="15" fill="rgb(211,81,21)" fg:x="502" fg:w="138"/><text x="0.6705%" y="366.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (138 samples, 0.12%)</title><rect x="0.4205%" y="372" width="0.1156%" height="15" fill="rgb(208,190,38)" fg:x="502" fg:w="138"/><text x="0.6705%" y="382.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (138 samples, 0.12%)</title><rect x="0.4205%" y="388" width="0.1156%" height="15" fill="rgb(235,213,38)" fg:x="502" fg:w="138"/><text x="0.6705%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (138 samples, 0.12%)</title><rect x="0.4205%" y="404" width="0.1156%" height="15" fill="rgb(237,122,38)" fg:x="502" fg:w="138"/><text x="0.6705%" y="414.50"></text></g><g><title>__init__ (src/trainers/base.py:30) (144 samples, 0.12%)</title><rect x="0.4205%" y="132" width="0.1206%" height="15" fill="rgb(244,218,35)" fg:x="502" fg:w="144"/><text x="0.6705%" y="142.50"></text></g><g><title>_create_optimizer (src/trainers/base.py:46) (144 samples, 0.12%)</title><rect x="0.4205%" y="148" width="0.1206%" height="15" fill="rgb(240,68,47)" fg:x="502" fg:w="144"/><text x="0.6705%" y="158.50"></text></g><g><title>__init__ (torch/optim/adam.py:78) (144 samples, 0.12%)</title><rect x="0.4205%" y="164" width="0.1206%" height="15" fill="rgb(210,16,53)" fg:x="502" fg:w="144"/><text x="0.6705%" y="174.50"></text></g><g><title>__init__ (torch/optim/optimizer.py:371) (144 samples, 0.12%)</title><rect x="0.4205%" y="180" width="0.1206%" height="15" fill="rgb(235,124,12)" fg:x="502" fg:w="144"/><text x="0.6705%" y="190.50"></text></g><g><title>inner (torch/_compile.py:27) (144 samples, 0.12%)</title><rect x="0.4205%" y="196" width="0.1206%" height="15" fill="rgb(224,169,11)" fg:x="502" fg:w="144"/><text x="0.6705%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (144 samples, 0.12%)</title><rect x="0.4205%" y="212" width="0.1206%" height="15" fill="rgb(250,166,2)" fg:x="502" fg:w="144"/><text x="0.6705%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (144 samples, 0.12%)</title><rect x="0.4205%" y="228" width="0.1206%" height="15" fill="rgb(242,216,29)" fg:x="502" fg:w="144"/><text x="0.6705%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (144 samples, 0.12%)</title><rect x="0.4205%" y="244" width="0.1206%" height="15" fill="rgb(230,116,27)" fg:x="502" fg:w="144"/><text x="0.6705%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (144 samples, 0.12%)</title><rect x="0.4205%" y="260" width="0.1206%" height="15" fill="rgb(228,99,48)" fg:x="502" fg:w="144"/><text x="0.6705%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (144 samples, 0.12%)</title><rect x="0.4205%" y="276" width="0.1206%" height="15" fill="rgb(253,11,6)" fg:x="502" fg:w="144"/><text x="0.6705%" y="286.50"></text></g><g><title>main (main.py:69) (223 samples, 0.19%)</title><rect x="0.4171%" y="84" width="0.1868%" height="15" fill="rgb(247,143,39)" fg:x="498" fg:w="223"/><text x="0.6671%" y="94.50"></text></g><g><title>init_trainer (src/trainers/__init__.py:13) (223 samples, 0.19%)</title><rect x="0.4171%" y="100" width="0.1868%" height="15" fill="rgb(236,97,10)" fg:x="498" fg:w="223"/><text x="0.6671%" y="110.50"></text></g><g><title>__init__ (src/trainers/match.py:11) (223 samples, 0.19%)</title><rect x="0.4171%" y="116" width="0.1868%" height="15" fill="rgb(233,208,19)" fg:x="498" fg:w="223"/><text x="0.6671%" y="126.50"></text></g><g><title>forward (src/models/draftrec.py:123) (1,368 samples, 1.15%)</title><rect x="0.7430%" y="228" width="1.1459%" height="15" fill="rgb(216,164,2)" fg:x="887" fg:w="1368"/><text x="0.9930%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,587 samples, 1.33%)</title><rect x="0.6441%" y="132" width="1.3293%" height="15" fill="rgb(220,129,5)" fg:x="769" fg:w="1587"/><text x="0.8941%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,587 samples, 1.33%)</title><rect x="0.6441%" y="148" width="1.3293%" height="15" fill="rgb(242,17,10)" fg:x="769" fg:w="1587"/><text x="0.8941%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,587 samples, 1.33%)</title><rect x="0.6441%" y="164" width="1.3293%" height="15" fill="rgb(242,107,0)" fg:x="769" fg:w="1587"/><text x="0.8941%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,587 samples, 1.33%)</title><rect x="0.6441%" y="180" width="1.3293%" height="15" fill="rgb(251,28,31)" fg:x="769" fg:w="1587"/><text x="0.8941%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,587 samples, 1.33%)</title><rect x="0.6441%" y="196" width="1.3293%" height="15" fill="rgb(233,223,10)" fg:x="769" fg:w="1587"/><text x="0.8941%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,587 samples, 1.33%)</title><rect x="0.6441%" y="212" width="1.3293%" height="15" fill="rgb(215,21,27)" fg:x="769" fg:w="1587"/><text x="0.8941%" y="222.50"></text></g><g><title>ndcg_score (sklearn/metrics/_ranking.py:1876) (122 samples, 0.10%)</title><rect x="1.9952%" y="196" width="0.1022%" height="15" fill="rgb(232,23,21)" fg:x="2382" fg:w="122"/><text x="2.2452%" y="206.50"></text></g><g><title>validate (src/trainers/base.py:181) (1,736 samples, 1.45%)</title><rect x="0.6441%" y="116" width="1.4541%" height="15" fill="rgb(244,5,23)" fg:x="769" fg:w="1736"/><text x="0.8941%" y="126.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:50) (146 samples, 0.12%)</title><rect x="1.9759%" y="132" width="0.1223%" height="15" fill="rgb(226,81,46)" fg:x="2359" fg:w="146"/><text x="2.2259%" y="142.50"></text></g><g><title>get_recommendation_metrics_for_ks (src/common/metrics.py:103) (126 samples, 0.11%)</title><rect x="1.9927%" y="148" width="0.1055%" height="15" fill="rgb(247,70,30)" fg:x="2379" fg:w="126"/><text x="2.2427%" y="158.50"></text></g><g><title>ndcg_at_k (src/common/metrics.py:93) (126 samples, 0.11%)</title><rect x="1.9927%" y="164" width="0.1055%" height="15" fill="rgb(212,68,19)" fg:x="2379" fg:w="126"/><text x="2.2427%" y="174.50"></text></g><g><title>wrapper (sklearn/utils/_param_validation.py:213) (126 samples, 0.11%)</title><rect x="1.9927%" y="180" width="0.1055%" height="15" fill="rgb(240,187,13)" fg:x="2379" fg:w="126"/><text x="2.2427%" y="190.50"></text></g><g><title>train (src/trainers/base.py:86) (1,786 samples, 1.50%)</title><rect x="0.6039%" y="100" width="1.4960%" height="15" fill="rgb(223,113,26)" fg:x="721" fg:w="1786"/><text x="0.8539%" y="110.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:133) (139 samples, 0.12%)</title><rect x="2.0999%" y="116" width="0.1164%" height="15" fill="rgb(206,192,2)" fg:x="2507" fg:w="139"/><text x="2.3499%" y="126.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:137) (1,239 samples, 1.04%)</title><rect x="2.2163%" y="116" width="1.0378%" height="15" fill="rgb(241,108,4)" fg:x="2646" fg:w="1239"/><text x="2.4663%" y="126.50"></text></g><g><title>&lt;dictcomp&gt; (src/trainers/base.py:137) (1,239 samples, 1.04%)</title><rect x="2.2163%" y="132" width="1.0378%" height="15" fill="rgb(247,173,49)" fg:x="2646" fg:w="1239"/><text x="2.4663%" y="142.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:171) (271 samples, 0.23%)</title><rect x="3.5465%" y="180" width="0.2270%" height="15" fill="rgb(224,114,35)" fg:x="4234" fg:w="271"/><text x="3.7965%" y="190.50"></text></g><g><title>__exit__ (torch/autograd/profiler.py:750) (242 samples, 0.20%)</title><rect x="3.5708%" y="196" width="0.2027%" height="15" fill="rgb(245,159,27)" fg:x="4263" fg:w="242"/><text x="3.8208%" y="206.50"></text></g><g><title>__call__ (torch/_ops.py:953) (238 samples, 0.20%)</title><rect x="3.5741%" y="212" width="0.1994%" height="15" fill="rgb(245,172,44)" fg:x="4267" fg:w="238"/><text x="3.8241%" y="222.50"></text></g><g><title>forward (layers.py:57) (167 samples, 0.14%)</title><rect x="3.8765%" y="324" width="0.1399%" height="15" fill="rgb(236,23,11)" fg:x="4628" fg:w="167"/><text x="4.1265%" y="334.50"></text></g><g><title>forward (transformer.py:20) (194 samples, 0.16%)</title><rect x="3.8765%" y="276" width="0.1625%" height="15" fill="rgb(205,117,38)" fg:x="4628" fg:w="194"/><text x="4.1265%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (194 samples, 0.16%)</title><rect x="3.8765%" y="292" width="0.1625%" height="15" fill="rgb(237,72,25)" fg:x="4628" fg:w="194"/><text x="4.1265%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (194 samples, 0.16%)</title><rect x="3.8765%" y="308" width="0.1625%" height="15" fill="rgb(244,70,9)" fg:x="4628" fg:w="194"/><text x="4.1265%" y="318.50"></text></g><g><title>forward (layers.py:46) (332 samples, 0.28%)</title><rect x="4.0398%" y="372" width="0.2781%" height="15" fill="rgb(217,125,39)" fg:x="4823" fg:w="332"/><text x="4.2898%" y="382.50"></text></g><g><title>forward (transformer.py:78) (627 samples, 0.53%)</title><rect x="4.3246%" y="372" width="0.5252%" height="15" fill="rgb(235,36,10)" fg:x="5163" fg:w="627"/><text x="4.5746%" y="382.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (627 samples, 0.53%)</title><rect x="4.3246%" y="388" width="0.5252%" height="15" fill="rgb(251,123,47)" fg:x="5163" fg:w="627"/><text x="4.5746%" y="398.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (627 samples, 0.53%)</title><rect x="4.3246%" y="404" width="0.5252%" height="15" fill="rgb(221,13,13)" fg:x="5163" fg:w="627"/><text x="4.5746%" y="414.50"></text></g><g><title>forward (layers.py:32) (627 samples, 0.53%)</title><rect x="4.3246%" y="420" width="0.5252%" height="15" fill="rgb(238,131,9)" fg:x="5163" fg:w="627"/><text x="4.5746%" y="430.50"></text></g><g><title>forward (transformer.py:79) (145 samples, 0.12%)</title><rect x="4.8498%" y="372" width="0.1215%" height="15" fill="rgb(211,50,8)" fg:x="5790" fg:w="145"/><text x="5.0998%" y="382.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (143 samples, 0.12%)</title><rect x="4.8515%" y="388" width="0.1198%" height="15" fill="rgb(245,182,24)" fg:x="5792" fg:w="143"/><text x="5.1015%" y="398.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (142 samples, 0.12%)</title><rect x="4.8523%" y="404" width="0.1189%" height="15" fill="rgb(242,14,37)" fg:x="5793" fg:w="142"/><text x="5.1023%" y="414.50"></text></g><g><title>forward (torch/nn/modules/dropout.py:70) (141 samples, 0.12%)</title><rect x="4.8532%" y="420" width="0.1181%" height="15" fill="rgb(246,228,12)" fg:x="5794" fg:w="141"/><text x="5.1032%" y="430.50"></text></g><g><title>dropout (torch/nn/functional.py:1425) (141 samples, 0.12%)</title><rect x="4.8532%" y="436" width="0.1181%" height="15" fill="rgb(213,55,15)" fg:x="5794" fg:w="141"/><text x="5.1032%" y="446.50"></text></g><g><title>forward (layers.py:57) (1,129 samples, 0.95%)</title><rect x="4.0390%" y="324" width="0.9457%" height="15" fill="rgb(209,9,3)" fg:x="4822" fg:w="1129"/><text x="4.2890%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,128 samples, 0.94%)</title><rect x="4.0398%" y="340" width="0.9448%" height="15" fill="rgb(230,59,30)" fg:x="4823" fg:w="1128"/><text x="4.2898%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,128 samples, 0.94%)</title><rect x="4.0398%" y="356" width="0.9448%" height="15" fill="rgb(209,121,21)" fg:x="4823" fg:w="1128"/><text x="4.2898%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:116) (1,335 samples, 1.12%)</title><rect x="3.8765%" y="228" width="1.1182%" height="15" fill="rgb(220,109,13)" fg:x="4628" fg:w="1335"/><text x="4.1265%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,335 samples, 1.12%)</title><rect x="3.8765%" y="244" width="1.1182%" height="15" fill="rgb(232,18,1)" fg:x="4628" fg:w="1335"/><text x="4.1265%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,335 samples, 1.12%)</title><rect x="3.8765%" y="260" width="1.1182%" height="15" fill="rgb(215,41,42)" fg:x="4628" fg:w="1335"/><text x="4.1265%" y="270.50"></text></g><g><title>forward (transformer.py:21) (1,141 samples, 0.96%)</title><rect x="4.0390%" y="276" width="0.9557%" height="15" fill="rgb(224,123,36)" fg:x="4822" fg:w="1141"/><text x="4.2890%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,141 samples, 0.96%)</title><rect x="4.0390%" y="292" width="0.9557%" height="15" fill="rgb(240,125,3)" fg:x="4822" fg:w="1141"/><text x="4.2890%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,141 samples, 0.96%)</title><rect x="4.0390%" y="308" width="0.9557%" height="15" fill="rgb(205,98,50)" fg:x="4822" fg:w="1141"/><text x="4.2890%" y="318.50"></text></g><g><title>forward (src/models/draftrec.py:123) (33,457 samples, 28.02%)</title><rect x="5.0274%" y="228" width="28.0242%" height="15" fill="rgb(205,185,37)" fg:x="6002" fg:w="33457"/><text x="5.2774%" y="238.50">forward (src/models/draftrec.py:123)</text></g><g><title>forward (src/models/draftrec.py:124) (217 samples, 0.18%)</title><rect x="33.0516%" y="228" width="0.1818%" height="15" fill="rgb(238,207,15)" fg:x="39459" fg:w="217"/><text x="33.3016%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:128) (270 samples, 0.23%)</title><rect x="33.2334%" y="228" width="0.2262%" height="15" fill="rgb(213,199,42)" fg:x="39676" fg:w="270"/><text x="33.4834%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:129) (335 samples, 0.28%)</title><rect x="33.4595%" y="228" width="0.2806%" height="15" fill="rgb(235,201,11)" fg:x="39946" fg:w="335"/><text x="33.7095%" y="238.50"></text></g><g><title>forward (layers.py:32) (340 samples, 0.28%)</title><rect x="33.8708%" y="372" width="0.2848%" height="15" fill="rgb(207,46,11)" fg:x="40437" fg:w="340"/><text x="34.1208%" y="382.50"></text></g><g><title>forward (src/models/heads/__init__.py:33) (385 samples, 0.32%)</title><rect x="33.8683%" y="276" width="0.3225%" height="15" fill="rgb(241,35,35)" fg:x="40434" fg:w="385"/><text x="34.1183%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (385 samples, 0.32%)</title><rect x="33.8683%" y="292" width="0.3225%" height="15" fill="rgb(243,32,47)" fg:x="40434" fg:w="385"/><text x="34.1183%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (385 samples, 0.32%)</title><rect x="33.8683%" y="308" width="0.3225%" height="15" fill="rgb(247,202,23)" fg:x="40434" fg:w="385"/><text x="34.1183%" y="318.50"></text></g><g><title>forward (torch/nn/modules/container.py:250) (383 samples, 0.32%)</title><rect x="33.8700%" y="324" width="0.3208%" height="15" fill="rgb(219,102,11)" fg:x="40436" fg:w="383"/><text x="34.1200%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (383 samples, 0.32%)</title><rect x="33.8700%" y="340" width="0.3208%" height="15" fill="rgb(243,110,44)" fg:x="40436" fg:w="383"/><text x="34.1200%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (383 samples, 0.32%)</title><rect x="33.8700%" y="356" width="0.3208%" height="15" fill="rgb(222,74,54)" fg:x="40436" fg:w="383"/><text x="34.1200%" y="366.50"></text></g><g><title>forward (src/models/heads/__init__.py:40) (142 samples, 0.12%)</title><rect x="34.1908%" y="276" width="0.1189%" height="15" fill="rgb(216,99,12)" fg:x="40819" fg:w="142"/><text x="34.4408%" y="286.50"></text></g><g><title>forward (src/models/heads/__init__.py:41) (250 samples, 0.21%)</title><rect x="34.3097%" y="276" width="0.2094%" height="15" fill="rgb(226,22,26)" fg:x="40961" fg:w="250"/><text x="34.5597%" y="286.50"></text></g><g><title>forward (src/models/draftrec.py:131) (979 samples, 0.82%)</title><rect x="33.8298%" y="228" width="0.8200%" height="15" fill="rgb(217,163,10)" fg:x="40388" fg:w="979"/><text x="34.0798%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (972 samples, 0.81%)</title><rect x="33.8356%" y="244" width="0.8142%" height="15" fill="rgb(213,25,53)" fg:x="40395" fg:w="972"/><text x="34.0856%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (935 samples, 0.78%)</title><rect x="33.8666%" y="260" width="0.7832%" height="15" fill="rgb(252,105,26)" fg:x="40432" fg:w="935"/><text x="34.1166%" y="270.50"></text></g><g><title>forward (src/models/heads/__init__.py:42) (156 samples, 0.13%)</title><rect x="34.5191%" y="276" width="0.1307%" height="15" fill="rgb(220,39,43)" fg:x="41211" fg:w="156"/><text x="34.7691%" y="286.50"></text></g><g><title>forward (src/models/draftrec.py:133) (480 samples, 0.40%)</title><rect x="34.6498%" y="228" width="0.4021%" height="15" fill="rgb(229,68,48)" fg:x="41367" fg:w="480"/><text x="34.8998%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:138) (139 samples, 0.12%)</title><rect x="35.0585%" y="228" width="0.1164%" height="15" fill="rgb(252,8,32)" fg:x="41855" fg:w="139"/><text x="35.3085%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:94) (201 samples, 0.17%)</title><rect x="35.2738%" y="228" width="0.1684%" height="15" fill="rgb(223,20,43)" fg:x="42112" fg:w="201"/><text x="35.5238%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (201 samples, 0.17%)</title><rect x="35.2738%" y="244" width="0.1684%" height="15" fill="rgb(229,81,49)" fg:x="42112" fg:w="201"/><text x="35.5238%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (201 samples, 0.17%)</title><rect x="35.2738%" y="260" width="0.1684%" height="15" fill="rgb(236,28,36)" fg:x="42112" fg:w="201"/><text x="35.5238%" y="270.50"></text></g><g><title>forward (torch/nn/modules/dropout.py:70) (200 samples, 0.17%)</title><rect x="35.2747%" y="276" width="0.1675%" height="15" fill="rgb(249,185,26)" fg:x="42113" fg:w="200"/><text x="35.5247%" y="286.50"></text></g><g><title>dropout (torch/nn/functional.py:1425) (200 samples, 0.17%)</title><rect x="35.2747%" y="292" width="0.1675%" height="15" fill="rgb(249,174,33)" fg:x="42113" fg:w="200"/><text x="35.5247%" y="302.50"></text></g><g><title>forward (layers.py:57) (179 samples, 0.15%)</title><rect x="35.4422%" y="324" width="0.1499%" height="15" fill="rgb(233,201,37)" fg:x="42313" fg:w="179"/><text x="35.6922%" y="334.50"></text></g><g><title>forward (transformer.py:20) (182 samples, 0.15%)</title><rect x="35.4422%" y="276" width="0.1524%" height="15" fill="rgb(221,78,26)" fg:x="42313" fg:w="182"/><text x="35.6922%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (182 samples, 0.15%)</title><rect x="35.4422%" y="292" width="0.1524%" height="15" fill="rgb(250,127,30)" fg:x="42313" fg:w="182"/><text x="35.6922%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (182 samples, 0.15%)</title><rect x="35.4422%" y="308" width="0.1524%" height="15" fill="rgb(230,49,44)" fg:x="42313" fg:w="182"/><text x="35.6922%" y="318.50"></text></g><g><title>forward (layers.py:57) (244 samples, 0.20%)</title><rect x="35.5955%" y="324" width="0.2044%" height="15" fill="rgb(229,67,23)" fg:x="42496" fg:w="244"/><text x="35.8455%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (244 samples, 0.20%)</title><rect x="35.5955%" y="340" width="0.2044%" height="15" fill="rgb(249,83,47)" fg:x="42496" fg:w="244"/><text x="35.8455%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (243 samples, 0.20%)</title><rect x="35.5963%" y="356" width="0.2035%" height="15" fill="rgb(215,43,3)" fg:x="42497" fg:w="243"/><text x="35.8463%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:98) (491 samples, 0.41%)</title><rect x="35.4422%" y="228" width="0.4113%" height="15" fill="rgb(238,154,13)" fg:x="42313" fg:w="491"/><text x="35.6922%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (491 samples, 0.41%)</title><rect x="35.4422%" y="244" width="0.4113%" height="15" fill="rgb(219,56,2)" fg:x="42313" fg:w="491"/><text x="35.6922%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (491 samples, 0.41%)</title><rect x="35.4422%" y="260" width="0.4113%" height="15" fill="rgb(233,0,4)" fg:x="42313" fg:w="491"/><text x="35.6922%" y="270.50"></text></g><g><title>forward (transformer.py:21) (309 samples, 0.26%)</title><rect x="35.5946%" y="276" width="0.2588%" height="15" fill="rgb(235,30,7)" fg:x="42495" fg:w="309"/><text x="35.8446%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (308 samples, 0.26%)</title><rect x="35.5955%" y="292" width="0.2580%" height="15" fill="rgb(250,79,13)" fg:x="42496" fg:w="308"/><text x="35.8455%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (308 samples, 0.26%)</title><rect x="35.5955%" y="308" width="0.2580%" height="15" fill="rgb(211,146,34)" fg:x="42496" fg:w="308"/><text x="35.8455%" y="318.50"></text></g><g><title>calculate_loss (src/trainers/match.py:19) (38,572 samples, 32.31%)</title><rect x="3.5465%" y="132" width="32.3086%" height="15" fill="rgb(228,22,38)" fg:x="4234" fg:w="38572"/><text x="3.7965%" y="142.50">calculate_loss (src/trainers/match.py:19)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (38,572 samples, 32.31%)</title><rect x="3.5465%" y="148" width="32.3086%" height="15" fill="rgb(235,168,5)" fg:x="4234" fg:w="38572"/><text x="3.7965%" y="158.50">_wrapped_call_impl (torch/nn/modules/module.py:1736)</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (38,572 samples, 32.31%)</title><rect x="3.5465%" y="164" width="32.3086%" height="15" fill="rgb(221,155,16)" fg:x="4234" fg:w="38572"/><text x="3.7965%" y="174.50">_call_impl (torch/nn/modules/module.py:1747)</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (38,301 samples, 32.08%)</title><rect x="3.7735%" y="180" width="32.0817%" height="15" fill="rgb(215,215,53)" fg:x="4505" fg:w="38301"/><text x="4.0235%" y="190.50">forward (torch/nn/parallel/data_parallel.py:173)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (38,301 samples, 32.08%)</title><rect x="3.7735%" y="196" width="32.0817%" height="15" fill="rgb(223,4,10)" fg:x="4505" fg:w="38301"/><text x="4.0235%" y="206.50">_wrapped_call_impl (torch/nn/modules/module.py:1736)</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (38,301 samples, 32.08%)</title><rect x="3.7735%" y="212" width="32.0817%" height="15" fill="rgb(234,103,6)" fg:x="4505" fg:w="38301"/><text x="4.0235%" y="222.50">_call_impl (torch/nn/modules/module.py:1747)</text></g><g><title>calculate_loss (src/trainers/match.py:21) (517 samples, 0.43%)</title><rect x="35.8551%" y="132" width="0.4330%" height="15" fill="rgb(227,97,0)" fg:x="42806" fg:w="517"/><text x="36.1051%" y="142.50"></text></g><g><title>cross_entropy (torch/nn/functional.py:3479) (438 samples, 0.37%)</title><rect x="35.9213%" y="148" width="0.3669%" height="15" fill="rgb(234,150,53)" fg:x="42885" fg:w="438"/><text x="36.1713%" y="158.50"></text></g><g><title>calculate_loss (src/trainers/match.py:22) (172 samples, 0.14%)</title><rect x="36.2882%" y="132" width="0.1441%" height="15" fill="rgb(228,201,54)" fg:x="43323" fg:w="172"/><text x="36.5382%" y="142.50"></text></g><g><title>sigmoid (torch/nn/functional.py:2284) (138 samples, 0.12%)</title><rect x="36.3167%" y="148" width="0.1156%" height="15" fill="rgb(222,22,37)" fg:x="43357" fg:w="138"/><text x="36.5667%" y="158.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:140) (39,672 samples, 33.23%)</title><rect x="3.2751%" y="116" width="33.2300%" height="15" fill="rgb(237,53,32)" fg:x="3910" fg:w="39672"/><text x="3.5251%" y="126.50">train_one_epoch (src/trainers/base.py:140)</text></g><g><title>train_one_epoch (src/trainers/base.py:145) (6,046 samples, 5.06%)</title><rect x="36.5068%" y="116" width="5.0642%" height="15" fill="rgb(233,25,53)" fg:x="43584" fg:w="6046"/><text x="36.7568%" y="126.50">train_..</text></g><g><title>backward (torch/_tensor.py:581) (6,046 samples, 5.06%)</title><rect x="36.5068%" y="132" width="5.0642%" height="15" fill="rgb(210,40,34)" fg:x="43584" fg:w="6046"/><text x="36.7568%" y="142.50">backwa..</text></g><g><title>backward (torch/autograd/__init__.py:347) (5,924 samples, 4.96%)</title><rect x="36.6090%" y="148" width="4.9621%" height="15" fill="rgb(241,220,44)" fg:x="43706" fg:w="5924"/><text x="36.8590%" y="158.50">backwa..</text></g><g><title>_engine_run_backward (torch/autograd/graph.py:825) (5,923 samples, 4.96%)</title><rect x="36.6098%" y="164" width="4.9612%" height="15" fill="rgb(235,28,35)" fg:x="43707" fg:w="5923"/><text x="36.8598%" y="174.50">_engin..</text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:109) (156 samples, 0.13%)</title><rect x="41.6950%" y="148" width="0.1307%" height="15" fill="rgb(210,56,17)" fg:x="49778" fg:w="156"/><text x="41.9450%" y="158.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:92) (203 samples, 0.17%)</title><rect x="42.0368%" y="148" width="0.1700%" height="15" fill="rgb(224,130,29)" fg:x="50186" fg:w="203"/><text x="42.2868%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (torch/nn/utils/clip_grad.py:92) (201 samples, 0.17%)</title><rect x="42.0384%" y="164" width="0.1684%" height="15" fill="rgb(235,212,8)" fg:x="50188" fg:w="201"/><text x="42.2884%" y="174.50"></text></g><g><title>_no_grad_wrapper (torch/nn/utils/clip_grad.py:30) (852 samples, 0.71%)</title><rect x="41.6422%" y="132" width="0.7137%" height="15" fill="rgb(223,33,50)" fg:x="49715" fg:w="852"/><text x="41.8922%" y="142.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:95) (163 samples, 0.14%)</title><rect x="42.2194%" y="148" width="0.1365%" height="15" fill="rgb(219,149,13)" fg:x="50404" fg:w="163"/><text x="42.4694%" y="158.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:147) (936 samples, 0.78%)</title><rect x="41.5736%" y="116" width="0.7840%" height="15" fill="rgb(250,156,29)" fg:x="49633" fg:w="936"/><text x="41.8236%" y="126.50"></text></g><g><title>wrapper (torch/optim/optimizer.py:472) (133 samples, 0.11%)</title><rect x="42.3609%" y="148" width="0.1114%" height="15" fill="rgb(216,193,19)" fg:x="50573" fg:w="133"/><text x="42.6109%" y="158.50"></text></g><g><title>__enter__ (torch/autograd/profiler.py:733) (133 samples, 0.11%)</title><rect x="42.3609%" y="164" width="0.1114%" height="15" fill="rgb(216,135,14)" fg:x="50573" fg:w="133"/><text x="42.6109%" y="174.50"></text></g><g><title>__call__ (torch/_ops.py:1116) (133 samples, 0.11%)</title><rect x="42.3609%" y="180" width="0.1114%" height="15" fill="rgb(241,47,5)" fg:x="50573" fg:w="133"/><text x="42.6109%" y="190.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:367) (5,057 samples, 4.24%)</title><rect x="42.5854%" y="228" width="4.2358%" height="15" fill="rgb(233,42,35)" fg:x="50841" fg:w="5057"/><text x="42.8354%" y="238.50">_sing..</text></g><g><title>_single_tensor_adam (torch/optim/adam.py:378) (316 samples, 0.26%)</title><rect x="46.8254%" y="228" width="0.2647%" height="15" fill="rgb(231,13,6)" fg:x="55903" fg:w="316"/><text x="47.0754%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:379) (325 samples, 0.27%)</title><rect x="47.0901%" y="228" width="0.2722%" height="15" fill="rgb(207,181,40)" fg:x="56219" fg:w="325"/><text x="47.3401%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:430) (187 samples, 0.16%)</title><rect x="47.3623%" y="228" width="0.1566%" height="15" fill="rgb(254,173,49)" fg:x="56544" fg:w="187"/><text x="47.6123%" y="238.50"></text></g><g><title>_use_grad (torch/optim/optimizer.py:91) (6,138 samples, 5.14%)</title><rect x="42.4757%" y="164" width="5.1413%" height="15" fill="rgb(221,1,38)" fg:x="50710" fg:w="6138"/><text x="42.7257%" y="174.50">_use_g..</text></g><g><title>step (torch/optim/adam.py:223) (6,112 samples, 5.12%)</title><rect x="42.4974%" y="180" width="5.1195%" height="15" fill="rgb(206,124,46)" fg:x="50736" fg:w="6112"/><text x="42.7474%" y="190.50">step (..</text></g><g><title>maybe_fallback (torch/optim/optimizer.py:154) (6,111 samples, 5.12%)</title><rect x="42.4983%" y="196" width="5.1187%" height="15" fill="rgb(249,21,11)" fg:x="50737" fg:w="6111"/><text x="42.7483%" y="206.50">maybe_..</text></g><g><title>adam (torch/optim/adam.py:784) (6,107 samples, 5.12%)</title><rect x="42.5016%" y="212" width="5.1153%" height="15" fill="rgb(222,201,40)" fg:x="50741" fg:w="6107"/><text x="42.7516%" y="222.50">adam (..</text></g><g><title>train_one_epoch (src/trainers/base.py:148) (6,280 samples, 5.26%)</title><rect x="42.3576%" y="116" width="5.2602%" height="15" fill="rgb(235,61,29)" fg:x="50569" fg:w="6280"/><text x="42.6076%" y="126.50">train_..</text></g><g><title>wrapper (torch/optim/lr_scheduler.py:137) (6,278 samples, 5.26%)</title><rect x="42.3592%" y="132" width="5.2586%" height="15" fill="rgb(219,207,3)" fg:x="50571" fg:w="6278"/><text x="42.6092%" y="142.50">wrappe..</text></g><g><title>wrapper (torch/optim/optimizer.py:487) (6,142 samples, 5.14%)</title><rect x="42.4732%" y="148" width="5.1447%" height="15" fill="rgb(222,56,46)" fg:x="50707" fg:w="6142"/><text x="42.7232%" y="158.50">wrappe..</text></g><g><title>&lt;module&gt; (main.py:78) (56,410 samples, 47.25%)</title><rect x="0.4037%" y="68" width="47.2501%" height="15" fill="rgb(239,76,54)" fg:x="482" fg:w="56410"/><text x="0.6537%" y="78.50">&lt;module&gt; (main.py:78)</text></g><g><title>main (main.py:74) (56,171 samples, 47.05%)</title><rect x="0.6039%" y="84" width="47.0499%" height="15" fill="rgb(231,124,27)" fg:x="721" fg:w="56171"/><text x="0.8539%" y="94.50">main (main.py:74)</text></g><g><title>train (src/trainers/base.py:95) (54,385 samples, 45.55%)</title><rect x="2.0999%" y="100" width="45.5539%" height="15" fill="rgb(249,195,6)" fg:x="2507" fg:w="54385"/><text x="2.3499%" y="110.50">train (src/trainers/base.py:95)</text></g><g><title>_loop_check_status (wandb/sdk/wandb_run.py:243) (230 samples, 0.19%)</title><rect x="47.7954%" y="132" width="0.1927%" height="15" fill="rgb(237,174,47)" fg:x="57061" fg:w="230"/><text x="48.0454%" y="142.50"></text></g><g><title>check_network_status (wandb/sdk/wandb_run.py:281) (247 samples, 0.21%)</title><rect x="47.7954%" y="116" width="0.2069%" height="15" fill="rgb(206,201,31)" fg:x="57061" fg:w="247"/><text x="48.0454%" y="126.50"></text></g><g><title>_read_packet_bytes (wandb/sdk/lib/sock_client.py:256) (61,717 samples, 51.70%)</title><rect x="48.1170%" y="164" width="51.6953%" height="15" fill="rgb(231,57,52)" fg:x="57445" fg:w="61717"/><text x="48.3670%" y="174.50">_read_packet_bytes (wandb/sdk/lib/sock_client.py:256)</text></g><g><title>read_server_response (wandb/sdk/lib/sock_client.py:285) (61,827 samples, 51.79%)</title><rect x="48.0634%" y="148" width="51.7875%" height="15" fill="rgb(248,177,22)" fg:x="57381" fg:w="61827"/><text x="48.3134%" y="158.50">read_server_response (wandb/sdk/lib/sock_client.py:285)</text></g><g><title>_read_message (wandb/sdk/interface/router_sock.py:27) (61,856 samples, 51.81%)</title><rect x="48.0601%" y="132" width="51.8118%" height="15" fill="rgb(215,211,37)" fg:x="57377" fg:w="61856"/><text x="48.3101%" y="142.50">_read_message (wandb/sdk/interface/router_sock.py:27)</text></g><g><title>message_loop (wandb/sdk/interface/router.py:68) (61,857 samples, 51.81%)</title><rect x="48.0601%" y="116" width="51.8126%" height="15" fill="rgb(241,128,51)" fg:x="57377" fg:w="61857"/><text x="48.3101%" y="126.50">message_loop (wandb/sdk/interface/router.py:68)</text></g><g><title>run (threading.py:982) (62,280 samples, 52.17%)</title><rect x="47.7242%" y="100" width="52.1669%" height="15" fill="rgb(227,165,31)" fg:x="56976" fg:w="62280"/><text x="47.9742%" y="110.50">run (threading.py:982)</text></g><g><title>all (119,386 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="119386"/><text x="0.2500%" y="62.50"></text></g><g><title>_bootstrap (threading.py:1002) (62,410 samples, 52.28%)</title><rect x="47.7242%" y="68" width="52.2758%" height="15" fill="rgb(228,143,12)" fg:x="56976" fg:w="62410"/><text x="47.9742%" y="78.50">_bootstrap (threading.py:1002)</text></g><g><title>_bootstrap_inner (threading.py:1045) (62,410 samples, 52.28%)</title><rect x="47.7242%" y="84" width="52.2758%" height="15" fill="rgb(249,149,8)" fg:x="56976" fg:w="62410"/><text x="47.9742%" y="94.50">_bootstrap_inner (threading.py:1045)</text></g></svg></svg>