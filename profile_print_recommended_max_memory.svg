<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="474" onload="init(evt)" viewBox="0 0 1200 474" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="474" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile_print_recommended_max_memory.svg -- python main.py --template draftrec --./data/lol/user_history.npy --use_parallel true</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="463.00"> </text><svg id="frames" x="10" width="1180" total_samples="187696"><g><title>&lt;module&gt; (src/dataloaders/__init__.py:1) (198 samples, 0.11%)</title><rect x="0.0021%" y="164" width="0.1055%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="198"/><text x="0.2521%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (198 samples, 0.11%)</title><rect x="0.0021%" y="180" width="0.1055%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="198"/><text x="0.2521%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (198 samples, 0.11%)</title><rect x="0.0021%" y="196" width="0.1055%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="198"/><text x="0.2521%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (198 samples, 0.11%)</title><rect x="0.0021%" y="212" width="0.1055%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="198"/><text x="0.2521%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (198 samples, 0.11%)</title><rect x="0.0021%" y="228" width="0.1055%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="198"/><text x="0.2521%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (198 samples, 0.11%)</title><rect x="0.0021%" y="244" width="0.1055%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="198"/><text x="0.2521%" y="254.50"></text></g><g><title>&lt;module&gt; (src/dataloaders/base.py:1) (198 samples, 0.11%)</title><rect x="0.0021%" y="260" width="0.1055%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="198"/><text x="0.2521%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (198 samples, 0.11%)</title><rect x="0.0021%" y="276" width="0.1055%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="198"/><text x="0.2521%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (198 samples, 0.11%)</title><rect x="0.0021%" y="292" width="0.1055%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="198"/><text x="0.2521%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (198 samples, 0.11%)</title><rect x="0.0021%" y="308" width="0.1055%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="198"/><text x="0.2521%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (198 samples, 0.11%)</title><rect x="0.0021%" y="324" width="0.1055%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="198"/><text x="0.2521%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (198 samples, 0.11%)</title><rect x="0.0021%" y="340" width="0.1055%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="198"/><text x="0.2521%" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (198 samples, 0.11%)</title><rect x="0.0021%" y="356" width="0.1055%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="198"/><text x="0.2521%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (198 samples, 0.11%)</title><rect x="0.0021%" y="372" width="0.1055%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="198"/><text x="0.2521%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (198 samples, 0.11%)</title><rect x="0.0021%" y="388" width="0.1055%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="198"/><text x="0.2521%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (198 samples, 0.11%)</title><rect x="0.0021%" y="404" width="0.1055%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="198"/><text x="0.2521%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (198 samples, 0.11%)</title><rect x="0.0021%" y="420" width="0.1055%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="198"/><text x="0.2521%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (198 samples, 0.11%)</title><rect x="0.0021%" y="436" width="0.1055%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="198"/><text x="0.2521%" y="446.50"></text></g><g><title>&lt;module&gt; (main.py:15) (199 samples, 0.11%)</title><rect x="0.0021%" y="68" width="0.1060%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="199"/><text x="0.2521%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (199 samples, 0.11%)</title><rect x="0.0021%" y="84" width="0.1060%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="199"/><text x="0.2521%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (199 samples, 0.11%)</title><rect x="0.0021%" y="100" width="0.1060%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="199"/><text x="0.2521%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (199 samples, 0.11%)</title><rect x="0.0021%" y="116" width="0.1060%" height="15" fill="rgb(235,183,28)" fg:x="4" fg:w="199"/><text x="0.2521%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (199 samples, 0.11%)</title><rect x="0.0021%" y="132" width="0.1060%" height="15" fill="rgb(221,5,38)" fg:x="4" fg:w="199"/><text x="0.2521%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (199 samples, 0.11%)</title><rect x="0.0021%" y="148" width="0.1060%" height="15" fill="rgb(247,18,42)" fg:x="4" fg:w="199"/><text x="0.2521%" y="158.50"></text></g><g><title>&lt;module&gt; (main.py:17) (259 samples, 0.14%)</title><rect x="0.1092%" y="68" width="0.1380%" height="15" fill="rgb(241,131,45)" fg:x="205" fg:w="259"/><text x="0.3592%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (259 samples, 0.14%)</title><rect x="0.1092%" y="84" width="0.1380%" height="15" fill="rgb(249,31,29)" fg:x="205" fg:w="259"/><text x="0.3592%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (259 samples, 0.14%)</title><rect x="0.1092%" y="100" width="0.1380%" height="15" fill="rgb(225,111,53)" fg:x="205" fg:w="259"/><text x="0.3592%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (259 samples, 0.14%)</title><rect x="0.1092%" y="116" width="0.1380%" height="15" fill="rgb(238,160,17)" fg:x="205" fg:w="259"/><text x="0.3592%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (259 samples, 0.14%)</title><rect x="0.1092%" y="132" width="0.1380%" height="15" fill="rgb(214,148,48)" fg:x="205" fg:w="259"/><text x="0.3592%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (259 samples, 0.14%)</title><rect x="0.1092%" y="148" width="0.1380%" height="15" fill="rgb(232,36,49)" fg:x="205" fg:w="259"/><text x="0.3592%" y="158.50"></text></g><g><title>&lt;module&gt; (src/trainers/__init__.py:1) (259 samples, 0.14%)</title><rect x="0.1092%" y="164" width="0.1380%" height="15" fill="rgb(209,103,24)" fg:x="205" fg:w="259"/><text x="0.3592%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (259 samples, 0.14%)</title><rect x="0.1092%" y="180" width="0.1380%" height="15" fill="rgb(229,88,8)" fg:x="205" fg:w="259"/><text x="0.3592%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (259 samples, 0.14%)</title><rect x="0.1092%" y="196" width="0.1380%" height="15" fill="rgb(213,181,19)" fg:x="205" fg:w="259"/><text x="0.3592%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (259 samples, 0.14%)</title><rect x="0.1092%" y="212" width="0.1380%" height="15" fill="rgb(254,191,54)" fg:x="205" fg:w="259"/><text x="0.3592%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (258 samples, 0.14%)</title><rect x="0.1098%" y="228" width="0.1375%" height="15" fill="rgb(241,83,37)" fg:x="206" fg:w="258"/><text x="0.3598%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (258 samples, 0.14%)</title><rect x="0.1098%" y="244" width="0.1375%" height="15" fill="rgb(233,36,39)" fg:x="206" fg:w="258"/><text x="0.3598%" y="254.50"></text></g><g><title>main (main.py:69) (202 samples, 0.11%)</title><rect x="0.2770%" y="84" width="0.1076%" height="15" fill="rgb(226,3,54)" fg:x="520" fg:w="202"/><text x="0.5270%" y="94.50"></text></g><g><title>init_trainer (src/trainers/__init__.py:13) (202 samples, 0.11%)</title><rect x="0.2770%" y="100" width="0.1076%" height="15" fill="rgb(245,192,40)" fg:x="520" fg:w="202"/><text x="0.5270%" y="110.50"></text></g><g><title>__init__ (src/trainers/match.py:11) (202 samples, 0.11%)</title><rect x="0.2770%" y="116" width="0.1076%" height="15" fill="rgb(238,167,29)" fg:x="520" fg:w="202"/><text x="0.5270%" y="126.50"></text></g><g><title>forward (src/models/draftrec.py:123) (1,597 samples, 0.85%)</title><rect x="0.4891%" y="228" width="0.8508%" height="15" fill="rgb(232,182,51)" fg:x="918" fg:w="1597"/><text x="0.7391%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,793 samples, 0.96%)</title><rect x="0.4310%" y="132" width="0.9553%" height="15" fill="rgb(231,60,39)" fg:x="809" fg:w="1793"/><text x="0.6810%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,793 samples, 0.96%)</title><rect x="0.4310%" y="148" width="0.9553%" height="15" fill="rgb(208,69,12)" fg:x="809" fg:w="1793"/><text x="0.6810%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,793 samples, 0.96%)</title><rect x="0.4310%" y="164" width="0.9553%" height="15" fill="rgb(235,93,37)" fg:x="809" fg:w="1793"/><text x="0.6810%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,792 samples, 0.95%)</title><rect x="0.4315%" y="180" width="0.9547%" height="15" fill="rgb(213,116,39)" fg:x="810" fg:w="1792"/><text x="0.6815%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,792 samples, 0.95%)</title><rect x="0.4315%" y="196" width="0.9547%" height="15" fill="rgb(222,207,29)" fg:x="810" fg:w="1792"/><text x="0.6815%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,792 samples, 0.95%)</title><rect x="0.4315%" y="212" width="0.9547%" height="15" fill="rgb(206,96,30)" fg:x="810" fg:w="1792"/><text x="0.6815%" y="222.50"></text></g><g><title>validate (src/trainers/base.py:181) (1,955 samples, 1.04%)</title><rect x="0.4310%" y="116" width="1.0416%" height="15" fill="rgb(218,138,4)" fg:x="809" fg:w="1955"/><text x="0.6810%" y="126.50"></text></g><g><title>train (src/trainers/base.py:103) (2,045 samples, 1.09%)</title><rect x="0.3852%" y="100" width="1.0895%" height="15" fill="rgb(250,191,14)" fg:x="723" fg:w="2045"/><text x="0.6352%" y="110.50"></text></g><g><title>forward (src/models/draftrec.py:123) (3,316 samples, 1.77%)</title><rect x="1.7800%" y="228" width="1.7667%" height="15" fill="rgb(239,60,40)" fg:x="3341" fg:w="3316"/><text x="2.0300%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (3,827 samples, 2.04%)</title><rect x="1.6058%" y="132" width="2.0389%" height="15" fill="rgb(206,27,48)" fg:x="3014" fg:w="3827"/><text x="1.8558%" y="142.50">c..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (3,821 samples, 2.04%)</title><rect x="1.6090%" y="148" width="2.0357%" height="15" fill="rgb(225,35,8)" fg:x="3020" fg:w="3821"/><text x="1.8590%" y="158.50">_..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (3,814 samples, 2.03%)</title><rect x="1.6127%" y="164" width="2.0320%" height="15" fill="rgb(250,213,24)" fg:x="3027" fg:w="3814"/><text x="1.8627%" y="174.50">_..</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (3,810 samples, 2.03%)</title><rect x="1.6148%" y="180" width="2.0299%" height="15" fill="rgb(247,123,22)" fg:x="3031" fg:w="3810"/><text x="1.8648%" y="190.50">f..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (3,810 samples, 2.03%)</title><rect x="1.6148%" y="196" width="2.0299%" height="15" fill="rgb(231,138,38)" fg:x="3031" fg:w="3810"/><text x="1.8648%" y="206.50">_..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (3,810 samples, 2.03%)</title><rect x="1.6148%" y="212" width="2.0299%" height="15" fill="rgb(231,145,46)" fg:x="3031" fg:w="3810"/><text x="1.8648%" y="222.50">_..</text></g><g><title>_ndcg_sample_scores (sklearn/metrics/_ranking.py:1749) (236 samples, 0.13%)</title><rect x="3.6788%" y="212" width="0.1257%" height="15" fill="rgb(251,118,11)" fg:x="6905" fg:w="236"/><text x="3.9288%" y="222.50"></text></g><g><title>_dcg_sample_scores (sklearn/metrics/_ranking.py:1520) (236 samples, 0.13%)</title><rect x="3.6788%" y="228" width="0.1257%" height="15" fill="rgb(217,147,25)" fg:x="6905" fg:w="236"/><text x="3.9288%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/metrics/_ranking.py:1521) (233 samples, 0.12%)</title><rect x="3.6804%" y="244" width="0.1241%" height="15" fill="rgb(247,81,37)" fg:x="6908" fg:w="233"/><text x="3.9304%" y="254.50"></text></g><g><title>ndcg_score (sklearn/metrics/_ranking.py:1876) (247 samples, 0.13%)</title><rect x="3.6788%" y="196" width="0.1316%" height="15" fill="rgb(209,12,38)" fg:x="6905" fg:w="247"/><text x="3.9288%" y="206.50"></text></g><g><title>validate (src/trainers/base.py:181) (4,142 samples, 2.21%)</title><rect x="1.6042%" y="116" width="2.2068%" height="15" fill="rgb(227,1,9)" fg:x="3011" fg:w="4142"/><text x="1.8542%" y="126.50">v..</text></g><g><title>calculate_metrics (src/trainers/match.py:50) (300 samples, 0.16%)</title><rect x="3.6511%" y="132" width="0.1598%" height="15" fill="rgb(248,47,43)" fg:x="6853" fg:w="300"/><text x="3.9011%" y="142.50"></text></g><g><title>get_recommendation_metrics_for_ks (src/common/metrics.py:103) (262 samples, 0.14%)</title><rect x="3.6714%" y="148" width="0.1396%" height="15" fill="rgb(221,10,30)" fg:x="6891" fg:w="262"/><text x="3.9214%" y="158.50"></text></g><g><title>ndcg_at_k (src/common/metrics.py:93) (262 samples, 0.14%)</title><rect x="3.6714%" y="164" width="0.1396%" height="15" fill="rgb(210,229,1)" fg:x="6891" fg:w="262"/><text x="3.9214%" y="174.50"></text></g><g><title>wrapper (sklearn/utils/_param_validation.py:213) (257 samples, 0.14%)</title><rect x="3.6740%" y="180" width="0.1369%" height="15" fill="rgb(222,148,37)" fg:x="6896" fg:w="257"/><text x="3.9240%" y="190.50"></text></g><g><title>train (src/trainers/base.py:123) (4,338 samples, 2.31%)</title><rect x="1.5008%" y="100" width="2.3112%" height="15" fill="rgb(234,67,33)" fg:x="2817" fg:w="4338"/><text x="1.7508%" y="110.50">t..</text></g><g><title>forward (src/models/draftrec.py:123) (1,408 samples, 0.75%)</title><rect x="3.8818%" y="228" width="0.7501%" height="15" fill="rgb(247,98,35)" fg:x="7286" fg:w="1408"/><text x="4.1318%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,595 samples, 0.85%)</title><rect x="3.8344%" y="132" width="0.8498%" height="15" fill="rgb(247,138,52)" fg:x="7197" fg:w="1595"/><text x="4.0844%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,595 samples, 0.85%)</title><rect x="3.8344%" y="148" width="0.8498%" height="15" fill="rgb(213,79,30)" fg:x="7197" fg:w="1595"/><text x="4.0844%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,595 samples, 0.85%)</title><rect x="3.8344%" y="164" width="0.8498%" height="15" fill="rgb(246,177,23)" fg:x="7197" fg:w="1595"/><text x="4.0844%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,595 samples, 0.85%)</title><rect x="3.8344%" y="180" width="0.8498%" height="15" fill="rgb(230,62,27)" fg:x="7197" fg:w="1595"/><text x="4.0844%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,595 samples, 0.85%)</title><rect x="3.8344%" y="196" width="0.8498%" height="15" fill="rgb(216,154,8)" fg:x="7197" fg:w="1595"/><text x="4.0844%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,595 samples, 0.85%)</title><rect x="3.8344%" y="212" width="0.8498%" height="15" fill="rgb(244,35,45)" fg:x="7197" fg:w="1595"/><text x="4.0844%" y="222.50"></text></g><g><title>train (src/trainers/base.py:86) (1,767 samples, 0.94%)</title><rect x="3.8120%" y="100" width="0.9414%" height="15" fill="rgb(251,115,12)" fg:x="7155" fg:w="1767"/><text x="4.0620%" y="110.50"></text></g><g><title>validate (src/trainers/base.py:181) (1,725 samples, 0.92%)</title><rect x="3.8344%" y="116" width="0.9190%" height="15" fill="rgb(240,54,50)" fg:x="7197" fg:w="1725"/><text x="4.0844%" y="126.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:137) (1,430 samples, 0.76%)</title><rect x="4.8296%" y="116" width="0.7619%" height="15" fill="rgb(233,84,52)" fg:x="9065" fg:w="1430"/><text x="5.0796%" y="126.50"></text></g><g><title>&lt;dictcomp&gt; (src/trainers/base.py:137) (1,430 samples, 0.76%)</title><rect x="4.8296%" y="132" width="0.7619%" height="15" fill="rgb(207,117,47)" fg:x="9065" fg:w="1430"/><text x="5.0796%" y="142.50"></text></g><g><title>&lt;lambda&gt; (transformer.py:20) (191 samples, 0.10%)</title><rect x="5.8504%" y="340" width="0.1018%" height="15" fill="rgb(249,43,39)" fg:x="10981" fg:w="191"/><text x="6.1004%" y="350.50"></text></g><g><title>forward (layers.py:57) (270 samples, 0.14%)</title><rect x="5.8504%" y="324" width="0.1438%" height="15" fill="rgb(209,38,44)" fg:x="10981" fg:w="270"/><text x="6.1004%" y="334.50"></text></g><g><title>forward (transformer.py:20) (414 samples, 0.22%)</title><rect x="5.8504%" y="276" width="0.2206%" height="15" fill="rgb(236,212,23)" fg:x="10981" fg:w="414"/><text x="6.1004%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (414 samples, 0.22%)</title><rect x="5.8504%" y="292" width="0.2206%" height="15" fill="rgb(242,79,21)" fg:x="10981" fg:w="414"/><text x="6.1004%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (414 samples, 0.22%)</title><rect x="5.8504%" y="308" width="0.2206%" height="15" fill="rgb(211,96,35)" fg:x="10981" fg:w="414"/><text x="6.1004%" y="318.50"></text></g><g><title>forward (transformer.py:79) (587 samples, 0.31%)</title><rect x="6.2228%" y="372" width="0.3127%" height="15" fill="rgb(253,215,40)" fg:x="11680" fg:w="587"/><text x="6.4728%" y="382.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (587 samples, 0.31%)</title><rect x="6.2228%" y="388" width="0.3127%" height="15" fill="rgb(211,81,21)" fg:x="11680" fg:w="587"/><text x="6.4728%" y="398.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (587 samples, 0.31%)</title><rect x="6.2228%" y="404" width="0.3127%" height="15" fill="rgb(208,190,38)" fg:x="11680" fg:w="587"/><text x="6.4728%" y="414.50"></text></g><g><title>forward (torch/nn/modules/dropout.py:70) (587 samples, 0.31%)</title><rect x="6.2228%" y="420" width="0.3127%" height="15" fill="rgb(235,213,38)" fg:x="11680" fg:w="587"/><text x="6.4728%" y="430.50"></text></g><g><title>dropout (torch/nn/functional.py:1425) (587 samples, 0.31%)</title><rect x="6.2228%" y="436" width="0.3127%" height="15" fill="rgb(237,122,38)" fg:x="11680" fg:w="587"/><text x="6.4728%" y="446.50"></text></g><g><title>forward (layers.py:57) (891 samples, 0.47%)</title><rect x="6.0715%" y="324" width="0.4747%" height="15" fill="rgb(244,218,35)" fg:x="11396" fg:w="891"/><text x="6.3215%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (891 samples, 0.47%)</title><rect x="6.0715%" y="340" width="0.4747%" height="15" fill="rgb(240,68,47)" fg:x="11396" fg:w="891"/><text x="6.3215%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (891 samples, 0.47%)</title><rect x="6.0715%" y="356" width="0.4747%" height="15" fill="rgb(210,16,53)" fg:x="11396" fg:w="891"/><text x="6.3215%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:116) (1,340 samples, 0.71%)</title><rect x="5.8494%" y="228" width="0.7139%" height="15" fill="rgb(235,124,12)" fg:x="10979" fg:w="1340"/><text x="6.0994%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,339 samples, 0.71%)</title><rect x="5.8499%" y="244" width="0.7134%" height="15" fill="rgb(224,169,11)" fg:x="10980" fg:w="1339"/><text x="6.0999%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,339 samples, 0.71%)</title><rect x="5.8499%" y="260" width="0.7134%" height="15" fill="rgb(250,166,2)" fg:x="10980" fg:w="1339"/><text x="6.0999%" y="270.50"></text></g><g><title>forward (transformer.py:21) (924 samples, 0.49%)</title><rect x="6.0710%" y="276" width="0.4923%" height="15" fill="rgb(242,216,29)" fg:x="11395" fg:w="924"/><text x="6.3210%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (924 samples, 0.49%)</title><rect x="6.0710%" y="292" width="0.4923%" height="15" fill="rgb(230,116,27)" fg:x="11395" fg:w="924"/><text x="6.3210%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (923 samples, 0.49%)</title><rect x="6.0715%" y="308" width="0.4918%" height="15" fill="rgb(228,99,48)" fg:x="11396" fg:w="923"/><text x="6.3215%" y="318.50"></text></g><g><title>forward (src/models/draftrec.py:123) (48,237 samples, 25.70%)</title><rect x="6.6171%" y="228" width="25.6995%" height="15" fill="rgb(253,11,6)" fg:x="12420" fg:w="48237"/><text x="6.8671%" y="238.50">forward (src/models/draftrec.py:123)</text></g><g><title>forward (src/models/draftrec.py:131) (367 samples, 0.20%)</title><rect x="32.5857%" y="228" width="0.1955%" height="15" fill="rgb(247,143,39)" fg:x="61162" fg:w="367"/><text x="32.8357%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (367 samples, 0.20%)</title><rect x="32.5857%" y="244" width="0.1955%" height="15" fill="rgb(236,97,10)" fg:x="61162" fg:w="367"/><text x="32.8357%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (338 samples, 0.18%)</title><rect x="32.6011%" y="260" width="0.1801%" height="15" fill="rgb(233,208,19)" fg:x="61191" fg:w="338"/><text x="32.8511%" y="270.50"></text></g><g><title>forward (src/models/draftrec.py:133) (215 samples, 0.11%)</title><rect x="32.7812%" y="228" width="0.1145%" height="15" fill="rgb(216,164,2)" fg:x="61529" fg:w="215"/><text x="33.0312%" y="238.50"></text></g><g><title>forward (transformer.py:78) (188 samples, 0.10%)</title><rect x="33.1962%" y="372" width="0.1002%" height="15" fill="rgb(220,129,5)" fg:x="62308" fg:w="188"/><text x="33.4462%" y="382.50"></text></g><g><title>forward (layers.py:57) (499 samples, 0.27%)</title><rect x="33.1131%" y="324" width="0.2659%" height="15" fill="rgb(242,17,10)" fg:x="62152" fg:w="499"/><text x="33.3631%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (499 samples, 0.27%)</title><rect x="33.1131%" y="340" width="0.2659%" height="15" fill="rgb(242,107,0)" fg:x="62152" fg:w="499"/><text x="33.3631%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (499 samples, 0.27%)</title><rect x="33.1131%" y="356" width="0.2659%" height="15" fill="rgb(251,28,31)" fg:x="62152" fg:w="499"/><text x="33.3631%" y="366.50"></text></g><g><title>calculate_loss (src/trainers/match.py:19) (52,106 samples, 27.76%)</title><rect x="5.6922%" y="132" width="27.7608%" height="15" fill="rgb(233,223,10)" fg:x="10684" fg:w="52106"/><text x="5.9422%" y="142.50">calculate_loss (src/trainers/match.py:19)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (52,106 samples, 27.76%)</title><rect x="5.6922%" y="148" width="27.7608%" height="15" fill="rgb(215,21,27)" fg:x="10684" fg:w="52106"/><text x="5.9422%" y="158.50">_wrapped_call_impl (torch/nn/modules/module.p..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (52,103 samples, 27.76%)</title><rect x="5.6938%" y="164" width="27.7592%" height="15" fill="rgb(232,23,21)" fg:x="10687" fg:w="52103"/><text x="5.9438%" y="174.50">_call_impl (torch/nn/modules/module.py:1747)</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (52,019 samples, 27.71%)</title><rect x="5.7385%" y="180" width="27.7145%" height="15" fill="rgb(244,5,23)" fg:x="10771" fg:w="52019"/><text x="5.9885%" y="190.50">forward (torch/nn/parallel/data_parallel.py:..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (52,019 samples, 27.71%)</title><rect x="5.7385%" y="196" width="27.7145%" height="15" fill="rgb(226,81,46)" fg:x="10771" fg:w="52019"/><text x="5.9885%" y="206.50">_wrapped_call_impl (torch/nn/modules/module...</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (52,018 samples, 27.71%)</title><rect x="5.7391%" y="212" width="27.7140%" height="15" fill="rgb(247,70,30)" fg:x="10772" fg:w="52018"/><text x="5.9891%" y="222.50">_call_impl (torch/nn/modules/module.py:1747)</text></g><g><title>forward (src/models/draftrec.py:98) (767 samples, 0.41%)</title><rect x="33.0444%" y="228" width="0.4086%" height="15" fill="rgb(212,68,19)" fg:x="62023" fg:w="767"/><text x="33.2944%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (767 samples, 0.41%)</title><rect x="33.0444%" y="244" width="0.4086%" height="15" fill="rgb(240,187,13)" fg:x="62023" fg:w="767"/><text x="33.2944%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (766 samples, 0.41%)</title><rect x="33.0449%" y="260" width="0.4081%" height="15" fill="rgb(223,113,26)" fg:x="62024" fg:w="766"/><text x="33.2949%" y="270.50"></text></g><g><title>forward (transformer.py:21) (638 samples, 0.34%)</title><rect x="33.1131%" y="276" width="0.3399%" height="15" fill="rgb(206,192,2)" fg:x="62152" fg:w="638"/><text x="33.3631%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (638 samples, 0.34%)</title><rect x="33.1131%" y="292" width="0.3399%" height="15" fill="rgb(241,108,4)" fg:x="62152" fg:w="638"/><text x="33.3631%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (638 samples, 0.34%)</title><rect x="33.1131%" y="308" width="0.3399%" height="15" fill="rgb(247,173,49)" fg:x="62152" fg:w="638"/><text x="33.3631%" y="318.50"></text></g><g><title>cross_entropy (torch/nn/functional.py:3479) (273 samples, 0.15%)</title><rect x="33.4743%" y="148" width="0.1454%" height="15" fill="rgb(224,114,35)" fg:x="62830" fg:w="273"/><text x="33.7243%" y="158.50"></text></g><g><title>calculate_loss (src/trainers/match.py:21) (315 samples, 0.17%)</title><rect x="33.4530%" y="132" width="0.1678%" height="15" fill="rgb(245,159,27)" fg:x="62790" fg:w="315"/><text x="33.7030%" y="142.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:140) (52,685 samples, 28.07%)</title><rect x="5.6000%" y="116" width="28.0693%" height="15" fill="rgb(245,172,44)" fg:x="10511" fg:w="52685"/><text x="5.8500%" y="126.50">train_one_epoch (src/trainers/base.py:140)</text></g><g><title>train_one_epoch (src/trainers/base.py:145) (19,125 samples, 10.19%)</title><rect x="33.6715%" y="116" width="10.1893%" height="15" fill="rgb(236,23,11)" fg:x="63200" fg:w="19125"/><text x="33.9215%" y="126.50">train_one_epoch..</text></g><g><title>backward (torch/_tensor.py:581) (19,124 samples, 10.19%)</title><rect x="33.6720%" y="132" width="10.1888%" height="15" fill="rgb(205,117,38)" fg:x="63201" fg:w="19124"/><text x="33.9220%" y="142.50">backward (torch..</text></g><g><title>backward (torch/autograd/__init__.py:347) (19,051 samples, 10.15%)</title><rect x="33.7109%" y="148" width="10.1499%" height="15" fill="rgb(237,72,25)" fg:x="63274" fg:w="19051"/><text x="33.9609%" y="158.50">backward (torch..</text></g><g><title>_engine_run_backward (torch/autograd/graph.py:825) (19,051 samples, 10.15%)</title><rect x="33.7109%" y="164" width="10.1499%" height="15" fill="rgb(244,70,9)" fg:x="63274" fg:w="19051"/><text x="33.9609%" y="174.50">_engine_run_bac..</text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:92) (423 samples, 0.23%)</title><rect x="43.9961%" y="148" width="0.2254%" height="15" fill="rgb(217,125,39)" fg:x="82579" fg:w="423"/><text x="44.2461%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (torch/nn/utils/clip_grad.py:92) (423 samples, 0.23%)</title><rect x="43.9961%" y="164" width="0.2254%" height="15" fill="rgb(235,36,10)" fg:x="82579" fg:w="423"/><text x="44.2461%" y="174.50"></text></g><g><title>_no_grad_wrapper (torch/nn/utils/clip_grad.py:30) (725 samples, 0.39%)</title><rect x="43.8688%" y="132" width="0.3863%" height="15" fill="rgb(251,123,47)" fg:x="82340" fg:w="725"/><text x="44.1188%" y="142.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:147) (741 samples, 0.39%)</title><rect x="43.8608%" y="116" width="0.3948%" height="15" fill="rgb(221,13,13)" fg:x="82325" fg:w="741"/><text x="44.1108%" y="126.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:367) (1,138 samples, 0.61%)</title><rect x="44.3446%" y="228" width="0.6063%" height="15" fill="rgb(238,131,9)" fg:x="83233" fg:w="1138"/><text x="44.5946%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:378) (1,429 samples, 0.76%)</title><rect x="44.9535%" y="228" width="0.7613%" height="15" fill="rgb(211,50,8)" fg:x="84376" fg:w="1429"/><text x="45.2035%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:379) (1,522 samples, 0.81%)</title><rect x="45.7149%" y="228" width="0.8109%" height="15" fill="rgb(245,182,24)" fg:x="85805" fg:w="1522"/><text x="45.9649%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:430) (524 samples, 0.28%)</title><rect x="46.5364%" y="228" width="0.2792%" height="15" fill="rgb(242,14,37)" fg:x="87347" fg:w="524"/><text x="46.7864%" y="238.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:148) (4,893 samples, 2.61%)</title><rect x="44.2556%" y="116" width="2.6069%" height="15" fill="rgb(246,228,12)" fg:x="83066" fg:w="4893"/><text x="44.5056%" y="126.50">tr..</text></g><g><title>wrapper (torch/optim/lr_scheduler.py:137) (4,893 samples, 2.61%)</title><rect x="44.2556%" y="132" width="2.6069%" height="15" fill="rgb(213,55,15)" fg:x="83066" fg:w="4893"/><text x="44.5056%" y="142.50">wr..</text></g><g><title>wrapper (torch/optim/optimizer.py:487) (4,809 samples, 2.56%)</title><rect x="44.3004%" y="148" width="2.5621%" height="15" fill="rgb(209,9,3)" fg:x="83150" fg:w="4809"/><text x="44.5504%" y="158.50">wr..</text></g><g><title>_use_grad (torch/optim/optimizer.py:91) (4,802 samples, 2.56%)</title><rect x="44.3041%" y="164" width="2.5584%" height="15" fill="rgb(230,59,30)" fg:x="83157" fg:w="4802"/><text x="44.5541%" y="174.50">_u..</text></g><g><title>step (torch/optim/adam.py:223) (4,775 samples, 2.54%)</title><rect x="44.3185%" y="180" width="2.5440%" height="15" fill="rgb(209,121,21)" fg:x="83184" fg:w="4775"/><text x="44.5685%" y="190.50">st..</text></g><g><title>maybe_fallback (torch/optim/optimizer.py:154) (4,775 samples, 2.54%)</title><rect x="44.3185%" y="196" width="2.5440%" height="15" fill="rgb(220,109,13)" fg:x="83184" fg:w="4775"/><text x="44.5685%" y="206.50">ma..</text></g><g><title>adam (torch/optim/adam.py:784) (4,772 samples, 2.54%)</title><rect x="44.3201%" y="212" width="2.5424%" height="15" fill="rgb(232,18,1)" fg:x="83187" fg:w="4772"/><text x="44.5701%" y="222.50">ad..</text></g><g><title>&lt;module&gt; (main.py:78) (87,488 samples, 46.61%)</title><rect x="0.2584%" y="68" width="46.6115%" height="15" fill="rgb(215,41,42)" fg:x="485" fg:w="87488"/><text x="0.5084%" y="78.50">&lt;module&gt; (main.py:78)</text></g><g><title>main (main.py:74) (87,251 samples, 46.49%)</title><rect x="0.3847%" y="84" width="46.4853%" height="15" fill="rgb(224,123,36)" fg:x="722" fg:w="87251"/><text x="0.6347%" y="94.50">main (main.py:74)</text></g><g><title>train (src/trainers/base.py:95) (79,050 samples, 42.12%)</title><rect x="4.7540%" y="100" width="42.1160%" height="15" fill="rgb(240,125,3)" fg:x="8923" fg:w="79050"/><text x="5.0040%" y="110.50">train (src/trainers/base.py:95)</text></g><g><title>_loop_check_status (wandb/sdk/wandb_run.py:243) (243 samples, 0.13%)</title><rect x="47.0303%" y="132" width="0.1295%" height="15" fill="rgb(205,98,50)" fg:x="88274" fg:w="243"/><text x="47.2803%" y="142.50"></text></g><g><title>check_network_status (wandb/sdk/wandb_run.py:281) (302 samples, 0.16%)</title><rect x="47.0260%" y="116" width="0.1609%" height="15" fill="rgb(205,185,37)" fg:x="88266" fg:w="302"/><text x="47.2760%" y="126.50"></text></g><g><title>_read_packet_bytes (wandb/sdk/lib/sock_client.py:256) (98,570 samples, 52.52%)</title><rect x="47.3228%" y="164" width="52.5158%" height="15" fill="rgb(238,207,15)" fg:x="88823" fg:w="98570"/><text x="47.5728%" y="174.50">_read_packet_bytes (wandb/sdk/lib/sock_client.py:256)</text></g><g><title>read_server_response (wandb/sdk/lib/sock_client.py:285) (98,715 samples, 52.59%)</title><rect x="47.2796%" y="148" width="52.5930%" height="15" fill="rgb(213,199,42)" fg:x="88742" fg:w="98715"/><text x="47.5296%" y="158.50">read_server_response (wandb/sdk/lib/sock_client.py:285)</text></g><g><title>_read_message (wandb/sdk/interface/router_sock.py:27) (98,745 samples, 52.61%)</title><rect x="47.2764%" y="132" width="52.6090%" height="15" fill="rgb(235,201,11)" fg:x="88736" fg:w="98745"/><text x="47.5264%" y="142.50">_read_message (wandb/sdk/interface/router_sock.py:27)</text></g><g><title>message_loop (wandb/sdk/interface/router.py:68) (98,753 samples, 52.61%)</title><rect x="47.2733%" y="116" width="52.6133%" height="15" fill="rgb(207,46,11)" fg:x="88730" fg:w="98753"/><text x="47.5233%" y="126.50">message_loop (wandb/sdk/interface/router.py:68)</text></g><g><title>run (threading.py:982) (99,438 samples, 52.98%)</title><rect x="46.9275%" y="100" width="52.9782%" height="15" fill="rgb(241,35,35)" fg:x="88081" fg:w="99438"/><text x="47.1775%" y="110.50">run (threading.py:982)</text></g><g><title>_bootstrap (threading.py:1002) (99,519 samples, 53.02%)</title><rect x="46.9275%" y="68" width="53.0214%" height="15" fill="rgb(243,32,47)" fg:x="88081" fg:w="99519"/><text x="47.1775%" y="78.50">_bootstrap (threading.py:1002)</text></g><g><title>_bootstrap_inner (threading.py:1045) (99,519 samples, 53.02%)</title><rect x="46.9275%" y="84" width="53.0214%" height="15" fill="rgb(247,202,23)" fg:x="88081" fg:w="99519"/><text x="47.1775%" y="94.50">_bootstrap_inner (threading.py:1045)</text></g><g><title>all (187,696 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="187696"/><text x="0.2500%" y="62.50"></text></g></svg></svg>