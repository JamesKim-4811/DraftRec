<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="474" onload="init(evt)" viewBox="0 0 1200 474" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="474" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile_4_worker_local_data.svg -- python main.py --template draftrec --/Users/jk/Documents/project_data --use_parallel true</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="463.00"> </text><svg id="frames" x="10" width="1180" total_samples="180422"><g><title>forward (src/models/draftrec.py:123) (1,604 samples, 0.89%)</title><rect x="0.3996%" y="228" width="0.8890%" height="15" fill="rgb(227,0,7)" fg:x="721" fg:w="1604"/><text x="0.6496%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,824 samples, 1.01%)</title><rect x="0.3314%" y="132" width="1.0110%" height="15" fill="rgb(217,0,24)" fg:x="598" fg:w="1824"/><text x="0.5814%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,823 samples, 1.01%)</title><rect x="0.3320%" y="148" width="1.0104%" height="15" fill="rgb(221,193,54)" fg:x="599" fg:w="1823"/><text x="0.5820%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,821 samples, 1.01%)</title><rect x="0.3331%" y="164" width="1.0093%" height="15" fill="rgb(248,212,6)" fg:x="601" fg:w="1821"/><text x="0.5831%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,820 samples, 1.01%)</title><rect x="0.3337%" y="180" width="1.0087%" height="15" fill="rgb(208,68,35)" fg:x="602" fg:w="1820"/><text x="0.5837%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,820 samples, 1.01%)</title><rect x="0.3337%" y="196" width="1.0087%" height="15" fill="rgb(232,128,0)" fg:x="602" fg:w="1820"/><text x="0.5837%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,820 samples, 1.01%)</title><rect x="0.3337%" y="212" width="1.0087%" height="15" fill="rgb(207,160,47)" fg:x="602" fg:w="1820"/><text x="0.5837%" y="222.50"></text></g><g><title>validate (src/trainers/base.py:181) (2,033 samples, 1.13%)</title><rect x="0.3309%" y="116" width="1.1268%" height="15" fill="rgb(228,23,34)" fg:x="597" fg:w="2033"/><text x="0.5809%" y="126.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:50) (195 samples, 0.11%)</title><rect x="1.3496%" y="132" width="0.1081%" height="15" fill="rgb(218,30,26)" fg:x="2435" fg:w="195"/><text x="1.5996%" y="142.50"></text></g><g><title>train (src/trainers/base.py:103) (2,124 samples, 1.18%)</title><rect x="0.2832%" y="100" width="1.1772%" height="15" fill="rgb(220,122,19)" fg:x="511" fg:w="2124"/><text x="0.5332%" y="110.50"></text></g><g><title>forward (src/models/draftrec.py:123) (3,201 samples, 1.77%)</title><rect x="1.7587%" y="228" width="1.7742%" height="15" fill="rgb(250,228,42)" fg:x="3173" fg:w="3201"/><text x="2.0087%" y="238.50">f..</text></g><g><title>calculate_metrics (src/trainers/match.py:36) (3,654 samples, 2.03%)</title><rect x="1.5929%" y="132" width="2.0253%" height="15" fill="rgb(240,193,28)" fg:x="2874" fg:w="3654"/><text x="1.8429%" y="142.50">c..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (3,649 samples, 2.02%)</title><rect x="1.5957%" y="148" width="2.0225%" height="15" fill="rgb(216,20,37)" fg:x="2879" fg:w="3649"/><text x="1.8457%" y="158.50">_..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (3,645 samples, 2.02%)</title><rect x="1.5979%" y="164" width="2.0203%" height="15" fill="rgb(206,188,39)" fg:x="2883" fg:w="3645"/><text x="1.8479%" y="174.50">_..</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (3,644 samples, 2.02%)</title><rect x="1.5985%" y="180" width="2.0197%" height="15" fill="rgb(217,207,13)" fg:x="2884" fg:w="3644"/><text x="1.8485%" y="190.50">f..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (3,644 samples, 2.02%)</title><rect x="1.5985%" y="196" width="2.0197%" height="15" fill="rgb(231,73,38)" fg:x="2884" fg:w="3644"/><text x="1.8485%" y="206.50">_..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (3,644 samples, 2.02%)</title><rect x="1.5985%" y="212" width="2.0197%" height="15" fill="rgb(225,20,46)" fg:x="2884" fg:w="3644"/><text x="1.8485%" y="222.50">_..</text></g><g><title>_ndcg_sample_scores (sklearn/metrics/_ranking.py:1749) (222 samples, 0.12%)</title><rect x="3.6537%" y="212" width="0.1230%" height="15" fill="rgb(210,31,41)" fg:x="6592" fg:w="222"/><text x="3.9037%" y="222.50"></text></g><g><title>_dcg_sample_scores (sklearn/metrics/_ranking.py:1520) (222 samples, 0.12%)</title><rect x="3.6537%" y="228" width="0.1230%" height="15" fill="rgb(221,200,47)" fg:x="6592" fg:w="222"/><text x="3.9037%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/metrics/_ranking.py:1521) (222 samples, 0.12%)</title><rect x="3.6537%" y="244" width="0.1230%" height="15" fill="rgb(226,26,5)" fg:x="6592" fg:w="222"/><text x="3.9037%" y="254.50"></text></g><g><title>validate (src/trainers/base.py:181) (3,946 samples, 2.19%)</title><rect x="1.5924%" y="116" width="2.1871%" height="15" fill="rgb(249,33,26)" fg:x="2873" fg:w="3946"/><text x="1.8424%" y="126.50">v..</text></g><g><title>calculate_metrics (src/trainers/match.py:50) (285 samples, 0.16%)</title><rect x="3.6215%" y="132" width="0.1580%" height="15" fill="rgb(235,183,28)" fg:x="6534" fg:w="285"/><text x="3.8715%" y="142.50"></text></g><g><title>get_recommendation_metrics_for_ks (src/common/metrics.py:103) (232 samples, 0.13%)</title><rect x="3.6509%" y="148" width="0.1286%" height="15" fill="rgb(221,5,38)" fg:x="6587" fg:w="232"/><text x="3.9009%" y="158.50"></text></g><g><title>ndcg_at_k (src/common/metrics.py:93) (232 samples, 0.13%)</title><rect x="3.6509%" y="164" width="0.1286%" height="15" fill="rgb(247,18,42)" fg:x="6587" fg:w="232"/><text x="3.9009%" y="174.50"></text></g><g><title>wrapper (sklearn/utils/_param_validation.py:213) (230 samples, 0.13%)</title><rect x="3.6520%" y="180" width="0.1275%" height="15" fill="rgb(241,131,45)" fg:x="6589" fg:w="230"/><text x="3.9020%" y="190.50"></text></g><g><title>ndcg_score (sklearn/metrics/_ranking.py:1876) (227 samples, 0.13%)</title><rect x="3.6537%" y="196" width="0.1258%" height="15" fill="rgb(249,31,29)" fg:x="6592" fg:w="227"/><text x="3.9037%" y="206.50"></text></g><g><title>train (src/trainers/base.py:123) (4,128 samples, 2.29%)</title><rect x="1.4926%" y="100" width="2.2880%" height="15" fill="rgb(225,111,53)" fg:x="2693" fg:w="4128"/><text x="1.7426%" y="110.50">t..</text></g><g><title>forward (src/models/draftrec.py:123) (1,323 samples, 0.73%)</title><rect x="3.8743%" y="228" width="0.7333%" height="15" fill="rgb(238,160,17)" fg:x="6990" fg:w="1323"/><text x="4.1243%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,522 samples, 0.84%)</title><rect x="3.8039%" y="132" width="0.8436%" height="15" fill="rgb(214,148,48)" fg:x="6863" fg:w="1522"/><text x="4.0539%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,522 samples, 0.84%)</title><rect x="3.8039%" y="148" width="0.8436%" height="15" fill="rgb(232,36,49)" fg:x="6863" fg:w="1522"/><text x="4.0539%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,521 samples, 0.84%)</title><rect x="3.8044%" y="164" width="0.8430%" height="15" fill="rgb(209,103,24)" fg:x="6864" fg:w="1521"/><text x="4.0544%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,521 samples, 0.84%)</title><rect x="3.8044%" y="180" width="0.8430%" height="15" fill="rgb(229,88,8)" fg:x="6864" fg:w="1521"/><text x="4.0544%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,521 samples, 0.84%)</title><rect x="3.8044%" y="196" width="0.8430%" height="15" fill="rgb(213,181,19)" fg:x="6864" fg:w="1521"/><text x="4.0544%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,521 samples, 0.84%)</title><rect x="3.8044%" y="212" width="0.8430%" height="15" fill="rgb(254,191,54)" fg:x="6864" fg:w="1521"/><text x="4.0544%" y="222.50"></text></g><g><title>validate (src/trainers/base.py:181) (1,678 samples, 0.93%)</title><rect x="3.8039%" y="116" width="0.9300%" height="15" fill="rgb(241,83,37)" fg:x="6863" fg:w="1678"/><text x="4.0539%" y="126.50"></text></g><g><title>train (src/trainers/base.py:86) (1,721 samples, 0.95%)</title><rect x="3.7806%" y="100" width="0.9539%" height="15" fill="rgb(233,36,39)" fg:x="6821" fg:w="1721"/><text x="4.0306%" y="110.50"></text></g><g><title>_next_data (torch/utils/data/dataloader.py:1448) (228 samples, 0.13%)</title><rect x="4.7544%" y="164" width="0.1264%" height="15" fill="rgb(226,3,54)" fg:x="8578" fg:w="228"/><text x="5.0044%" y="174.50"></text></g><g><title>_get_data (torch/utils/data/dataloader.py:1412) (228 samples, 0.13%)</title><rect x="4.7544%" y="180" width="0.1264%" height="15" fill="rgb(245,192,40)" fg:x="8578" fg:w="228"/><text x="5.0044%" y="190.50"></text></g><g><title>_try_get_data (torch/utils/data/dataloader.py:1243) (228 samples, 0.13%)</title><rect x="4.7544%" y="196" width="0.1264%" height="15" fill="rgb(238,167,29)" fg:x="8578" fg:w="228"/><text x="5.0044%" y="206.50"></text></g><g><title>get (multiprocessing/queues.py:122) (223 samples, 0.12%)</title><rect x="4.7572%" y="212" width="0.1236%" height="15" fill="rgb(232,182,51)" fg:x="8583" fg:w="223"/><text x="5.0072%" y="222.50"></text></g><g><title>__iter__ (tqdm/std.py:1181) (264 samples, 0.15%)</title><rect x="4.7361%" y="132" width="0.1463%" height="15" fill="rgb(231,60,39)" fg:x="8545" fg:w="264"/><text x="4.9861%" y="142.50"></text></g><g><title>__next__ (torch/utils/data/dataloader.py:701) (239 samples, 0.13%)</title><rect x="4.7500%" y="148" width="0.1325%" height="15" fill="rgb(208,69,12)" fg:x="8570" fg:w="239"/><text x="5.0000%" y="158.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:133) (300 samples, 0.17%)</title><rect x="4.7350%" y="116" width="0.1663%" height="15" fill="rgb(235,93,37)" fg:x="8543" fg:w="300"/><text x="4.9850%" y="126.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:137) (1,055 samples, 0.58%)</title><rect x="4.9013%" y="116" width="0.5847%" height="15" fill="rgb(213,116,39)" fg:x="8843" fg:w="1055"/><text x="5.1513%" y="126.50"></text></g><g><title>&lt;dictcomp&gt; (src/trainers/base.py:137) (1,055 samples, 0.58%)</title><rect x="4.9013%" y="132" width="0.5847%" height="15" fill="rgb(222,207,29)" fg:x="8843" fg:w="1055"/><text x="5.1513%" y="142.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:171) (704 samples, 0.39%)</title><rect x="5.9311%" y="180" width="0.3902%" height="15" fill="rgb(206,96,30)" fg:x="10701" fg:w="704"/><text x="6.1811%" y="190.50"></text></g><g><title>__exit__ (torch/autograd/profiler.py:750) (631 samples, 0.35%)</title><rect x="5.9716%" y="196" width="0.3497%" height="15" fill="rgb(218,138,4)" fg:x="10774" fg:w="631"/><text x="6.2216%" y="206.50"></text></g><g><title>__call__ (torch/_ops.py:953) (621 samples, 0.34%)</title><rect x="5.9771%" y="212" width="0.3442%" height="15" fill="rgb(250,191,14)" fg:x="10784" fg:w="621"/><text x="6.2271%" y="222.50"></text></g><g><title>&lt;lambda&gt; (transformer.py:20) (233 samples, 0.13%)</title><rect x="6.4238%" y="340" width="0.1291%" height="15" fill="rgb(239,60,40)" fg:x="11590" fg:w="233"/><text x="6.6738%" y="350.50"></text></g><g><title>forward (layers.py:57) (281 samples, 0.16%)</title><rect x="6.4238%" y="324" width="0.1557%" height="15" fill="rgb(206,27,48)" fg:x="11590" fg:w="281"/><text x="6.6738%" y="334.50"></text></g><g><title>forward (transformer.py:20) (407 samples, 0.23%)</title><rect x="6.4238%" y="276" width="0.2256%" height="15" fill="rgb(225,35,8)" fg:x="11590" fg:w="407"/><text x="6.6738%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (407 samples, 0.23%)</title><rect x="6.4238%" y="292" width="0.2256%" height="15" fill="rgb(250,213,24)" fg:x="11590" fg:w="407"/><text x="6.6738%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (407 samples, 0.23%)</title><rect x="6.4238%" y="308" width="0.2256%" height="15" fill="rgb(247,123,22)" fg:x="11590" fg:w="407"/><text x="6.6738%" y="318.50"></text></g><g><title>forward (layers.py:46) (249 samples, 0.14%)</title><rect x="6.6522%" y="372" width="0.1380%" height="15" fill="rgb(231,138,38)" fg:x="12002" fg:w="249"/><text x="6.9022%" y="382.50"></text></g><g><title>forward (transformer.py:78) (458 samples, 0.25%)</title><rect x="6.8002%" y="372" width="0.2538%" height="15" fill="rgb(231,145,46)" fg:x="12269" fg:w="458"/><text x="7.0502%" y="382.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (456 samples, 0.25%)</title><rect x="6.8013%" y="388" width="0.2527%" height="15" fill="rgb(251,118,11)" fg:x="12271" fg:w="456"/><text x="7.0513%" y="398.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (456 samples, 0.25%)</title><rect x="6.8013%" y="404" width="0.2527%" height="15" fill="rgb(217,147,25)" fg:x="12271" fg:w="456"/><text x="7.0513%" y="414.50"></text></g><g><title>forward (layers.py:32) (456 samples, 0.25%)</title><rect x="6.8013%" y="420" width="0.2527%" height="15" fill="rgb(247,81,37)" fg:x="12271" fg:w="456"/><text x="7.0513%" y="430.50"></text></g><g><title>forward (transformer.py:79) (317 samples, 0.18%)</title><rect x="7.0540%" y="372" width="0.1757%" height="15" fill="rgb(209,12,38)" fg:x="12727" fg:w="317"/><text x="7.3040%" y="382.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (316 samples, 0.18%)</title><rect x="7.0546%" y="388" width="0.1751%" height="15" fill="rgb(227,1,9)" fg:x="12728" fg:w="316"/><text x="7.3046%" y="398.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (311 samples, 0.17%)</title><rect x="7.0573%" y="404" width="0.1724%" height="15" fill="rgb(248,47,43)" fg:x="12733" fg:w="311"/><text x="7.3073%" y="414.50"></text></g><g><title>forward (torch/nn/modules/dropout.py:70) (311 samples, 0.17%)</title><rect x="7.0573%" y="420" width="0.1724%" height="15" fill="rgb(221,10,30)" fg:x="12733" fg:w="311"/><text x="7.3073%" y="430.50"></text></g><g><title>dropout (torch/nn/functional.py:1425) (311 samples, 0.17%)</title><rect x="7.0573%" y="436" width="0.1724%" height="15" fill="rgb(210,229,1)" fg:x="12733" fg:w="311"/><text x="7.3073%" y="446.50"></text></g><g><title>forward (layers.py:57) (1,094 samples, 0.61%)</title><rect x="6.6500%" y="324" width="0.6064%" height="15" fill="rgb(222,148,37)" fg:x="11998" fg:w="1094"/><text x="6.9000%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,094 samples, 0.61%)</title><rect x="6.6500%" y="340" width="0.6064%" height="15" fill="rgb(234,67,33)" fg:x="11998" fg:w="1094"/><text x="6.9000%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,091 samples, 0.60%)</title><rect x="6.6516%" y="356" width="0.6047%" height="15" fill="rgb(247,98,35)" fg:x="12001" fg:w="1091"/><text x="6.9016%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:116) (1,519 samples, 0.84%)</title><rect x="6.4238%" y="228" width="0.8419%" height="15" fill="rgb(247,138,52)" fg:x="11590" fg:w="1519"/><text x="6.6738%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,519 samples, 0.84%)</title><rect x="6.4238%" y="244" width="0.8419%" height="15" fill="rgb(213,79,30)" fg:x="11590" fg:w="1519"/><text x="6.6738%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,519 samples, 0.84%)</title><rect x="6.4238%" y="260" width="0.8419%" height="15" fill="rgb(246,177,23)" fg:x="11590" fg:w="1519"/><text x="6.6738%" y="270.50"></text></g><g><title>forward (transformer.py:21) (1,112 samples, 0.62%)</title><rect x="6.6494%" y="276" width="0.6163%" height="15" fill="rgb(230,62,27)" fg:x="11997" fg:w="1112"/><text x="6.8994%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,111 samples, 0.62%)</title><rect x="6.6500%" y="292" width="0.6158%" height="15" fill="rgb(216,154,8)" fg:x="11998" fg:w="1111"/><text x="6.9000%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,111 samples, 0.62%)</title><rect x="6.6500%" y="308" width="0.6158%" height="15" fill="rgb(244,35,45)" fg:x="11998" fg:w="1111"/><text x="6.9000%" y="318.50"></text></g><g><title>forward (layers.py:45) (188 samples, 0.10%)</title><rect x="7.2874%" y="276" width="0.1042%" height="15" fill="rgb(251,115,12)" fg:x="13148" fg:w="188"/><text x="7.5374%" y="286.50"></text></g><g><title>forward (src/models/draftrec.py:117) (315 samples, 0.17%)</title><rect x="7.2657%" y="228" width="0.1746%" height="15" fill="rgb(240,54,50)" fg:x="13109" fg:w="315"/><text x="7.5157%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (314 samples, 0.17%)</title><rect x="7.2663%" y="244" width="0.1740%" height="15" fill="rgb(233,84,52)" fg:x="13110" fg:w="314"/><text x="7.5163%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (314 samples, 0.17%)</title><rect x="7.2663%" y="260" width="0.1740%" height="15" fill="rgb(207,117,47)" fg:x="13110" fg:w="314"/><text x="7.5163%" y="270.50"></text></g><g><title>forward (src/models/draftrec.py:123) (34,990 samples, 19.39%)</title><rect x="7.4908%" y="228" width="19.3934%" height="15" fill="rgb(249,43,39)" fg:x="13515" fg:w="34990"/><text x="7.7408%" y="238.50">forward (src/models/draftrec.p..</text></g><g><title>forward (src/models/draftrec.py:124) (439 samples, 0.24%)</title><rect x="26.8842%" y="228" width="0.2433%" height="15" fill="rgb(209,38,44)" fg:x="48505" fg:w="439"/><text x="27.1342%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:128) (464 samples, 0.26%)</title><rect x="27.1275%" y="228" width="0.2572%" height="15" fill="rgb(236,212,23)" fg:x="48944" fg:w="464"/><text x="27.3775%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:129) (624 samples, 0.35%)</title><rect x="27.3847%" y="228" width="0.3459%" height="15" fill="rgb(242,79,21)" fg:x="49408" fg:w="624"/><text x="27.6347%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:130) (207 samples, 0.11%)</title><rect x="27.7305%" y="228" width="0.1147%" height="15" fill="rgb(211,96,35)" fg:x="50032" fg:w="207"/><text x="27.9805%" y="238.50"></text></g><g><title>forward (layers.py:32) (703 samples, 0.39%)</title><rect x="27.8979%" y="372" width="0.3896%" height="15" fill="rgb(253,215,40)" fg:x="50334" fg:w="703"/><text x="28.1479%" y="382.50"></text></g><g><title>forward (src/models/heads/__init__.py:33) (827 samples, 0.46%)</title><rect x="27.8974%" y="276" width="0.4584%" height="15" fill="rgb(211,81,21)" fg:x="50333" fg:w="827"/><text x="28.1474%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (827 samples, 0.46%)</title><rect x="27.8974%" y="292" width="0.4584%" height="15" fill="rgb(208,190,38)" fg:x="50333" fg:w="827"/><text x="28.1474%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (827 samples, 0.46%)</title><rect x="27.8974%" y="308" width="0.4584%" height="15" fill="rgb(235,213,38)" fg:x="50333" fg:w="827"/><text x="28.1474%" y="318.50"></text></g><g><title>forward (torch/nn/modules/container.py:250) (827 samples, 0.46%)</title><rect x="27.8974%" y="324" width="0.4584%" height="15" fill="rgb(237,122,38)" fg:x="50333" fg:w="827"/><text x="28.1474%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (827 samples, 0.46%)</title><rect x="27.8974%" y="340" width="0.4584%" height="15" fill="rgb(244,218,35)" fg:x="50333" fg:w="827"/><text x="28.1474%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (827 samples, 0.46%)</title><rect x="27.8974%" y="356" width="0.4584%" height="15" fill="rgb(240,68,47)" fg:x="50333" fg:w="827"/><text x="28.1474%" y="366.50"></text></g><g><title>forward (src/models/heads/__init__.py:40) (201 samples, 0.11%)</title><rect x="28.3557%" y="276" width="0.1114%" height="15" fill="rgb(210,16,53)" fg:x="51160" fg:w="201"/><text x="28.6057%" y="286.50"></text></g><g><title>forward (src/models/heads/__init__.py:41) (508 samples, 0.28%)</title><rect x="28.4671%" y="276" width="0.2816%" height="15" fill="rgb(235,124,12)" fg:x="51361" fg:w="508"/><text x="28.7171%" y="286.50"></text></g><g><title>forward (src/models/draftrec.py:131) (1,923 samples, 1.07%)</title><rect x="27.8453%" y="228" width="1.0658%" height="15" fill="rgb(224,169,11)" fg:x="50239" fg:w="1923"/><text x="28.0953%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,915 samples, 1.06%)</title><rect x="27.8497%" y="244" width="1.0614%" height="15" fill="rgb(250,166,2)" fg:x="50247" fg:w="1915"/><text x="28.0997%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,829 samples, 1.01%)</title><rect x="27.8974%" y="260" width="1.0137%" height="15" fill="rgb(242,216,29)" fg:x="50333" fg:w="1829"/><text x="28.1474%" y="270.50"></text></g><g><title>forward (src/models/heads/__init__.py:42) (293 samples, 0.16%)</title><rect x="28.7487%" y="276" width="0.1624%" height="15" fill="rgb(230,116,27)" fg:x="51869" fg:w="293"/><text x="28.9987%" y="286.50"></text></g><g><title>forward (src/models/draftrec.py:133) (1,078 samples, 0.60%)</title><rect x="28.9111%" y="228" width="0.5975%" height="15" fill="rgb(228,99,48)" fg:x="52162" fg:w="1078"/><text x="29.1611%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:138) (258 samples, 0.14%)</title><rect x="29.5164%" y="228" width="0.1430%" height="15" fill="rgb(253,11,6)" fg:x="53254" fg:w="258"/><text x="29.7664%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:88) (187 samples, 0.10%)</title><rect x="29.6993%" y="228" width="0.1036%" height="15" fill="rgb(247,143,39)" fg:x="53584" fg:w="187"/><text x="29.9493%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (187 samples, 0.10%)</title><rect x="29.6993%" y="244" width="0.1036%" height="15" fill="rgb(236,97,10)" fg:x="53584" fg:w="187"/><text x="29.9493%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (187 samples, 0.10%)</title><rect x="29.6993%" y="260" width="0.1036%" height="15" fill="rgb(233,208,19)" fg:x="53584" fg:w="187"/><text x="29.9493%" y="270.50"></text></g><g><title>forward (torch/nn/modules/sparse.py:190) (187 samples, 0.10%)</title><rect x="29.6993%" y="276" width="0.1036%" height="15" fill="rgb(216,164,2)" fg:x="53584" fg:w="187"/><text x="29.9493%" y="286.50"></text></g><g><title>embedding (torch/nn/functional.py:2551) (187 samples, 0.10%)</title><rect x="29.6993%" y="292" width="0.1036%" height="15" fill="rgb(220,129,5)" fg:x="53584" fg:w="187"/><text x="29.9493%" y="302.50"></text></g><g><title>forward (src/models/draftrec.py:94) (672 samples, 0.37%)</title><rect x="29.8727%" y="228" width="0.3725%" height="15" fill="rgb(242,17,10)" fg:x="53897" fg:w="672"/><text x="30.1227%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (672 samples, 0.37%)</title><rect x="29.8727%" y="244" width="0.3725%" height="15" fill="rgb(242,107,0)" fg:x="53897" fg:w="672"/><text x="30.1227%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (672 samples, 0.37%)</title><rect x="29.8727%" y="260" width="0.3725%" height="15" fill="rgb(251,28,31)" fg:x="53897" fg:w="672"/><text x="30.1227%" y="270.50"></text></g><g><title>forward (torch/nn/modules/dropout.py:70) (672 samples, 0.37%)</title><rect x="29.8727%" y="276" width="0.3725%" height="15" fill="rgb(233,223,10)" fg:x="53897" fg:w="672"/><text x="30.1227%" y="286.50"></text></g><g><title>dropout (torch/nn/functional.py:1425) (672 samples, 0.37%)</title><rect x="29.8727%" y="292" width="0.3725%" height="15" fill="rgb(215,21,27)" fg:x="53897" fg:w="672"/><text x="30.1227%" y="302.50"></text></g><g><title>forward (transformer.py:46) (254 samples, 0.14%)</title><rect x="30.2524%" y="356" width="0.1408%" height="15" fill="rgb(232,23,21)" fg:x="54582" fg:w="254"/><text x="30.5024%" y="366.50"></text></g><g><title>&lt;lambda&gt; (transformer.py:20) (331 samples, 0.18%)</title><rect x="30.2452%" y="340" width="0.1835%" height="15" fill="rgb(244,5,23)" fg:x="54569" fg:w="331"/><text x="30.4952%" y="350.50"></text></g><g><title>forward (layers.py:45) (227 samples, 0.13%)</title><rect x="30.4492%" y="372" width="0.1258%" height="15" fill="rgb(226,81,46)" fg:x="54937" fg:w="227"/><text x="30.6992%" y="382.50"></text></g><g><title>forward (layers.py:57) (618 samples, 0.34%)</title><rect x="30.2452%" y="324" width="0.3425%" height="15" fill="rgb(247,70,30)" fg:x="54569" fg:w="618"/><text x="30.4952%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (287 samples, 0.16%)</title><rect x="30.4287%" y="340" width="0.1591%" height="15" fill="rgb(212,68,19)" fg:x="54900" fg:w="287"/><text x="30.6787%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (287 samples, 0.16%)</title><rect x="30.4287%" y="356" width="0.1591%" height="15" fill="rgb(240,187,13)" fg:x="54900" fg:w="287"/><text x="30.6787%" y="366.50"></text></g><g><title>forward (transformer.py:20) (632 samples, 0.35%)</title><rect x="30.2452%" y="276" width="0.3503%" height="15" fill="rgb(223,113,26)" fg:x="54569" fg:w="632"/><text x="30.4952%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (632 samples, 0.35%)</title><rect x="30.2452%" y="292" width="0.3503%" height="15" fill="rgb(206,192,2)" fg:x="54569" fg:w="632"/><text x="30.4952%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (632 samples, 0.35%)</title><rect x="30.2452%" y="308" width="0.3503%" height="15" fill="rgb(241,108,4)" fg:x="54569" fg:w="632"/><text x="30.4952%" y="318.50"></text></g><g><title>forward (layers.py:57) (274 samples, 0.15%)</title><rect x="30.5955%" y="324" width="0.1519%" height="15" fill="rgb(247,173,49)" fg:x="55201" fg:w="274"/><text x="30.8455%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (274 samples, 0.15%)</title><rect x="30.5955%" y="340" width="0.1519%" height="15" fill="rgb(224,114,35)" fg:x="55201" fg:w="274"/><text x="30.8455%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (274 samples, 0.15%)</title><rect x="30.5955%" y="356" width="0.1519%" height="15" fill="rgb(245,159,27)" fg:x="55201" fg:w="274"/><text x="30.8455%" y="366.50"></text></g><g><title>calculate_loss (src/trainers/match.py:19) (44,880 samples, 24.88%)</title><rect x="5.9272%" y="132" width="24.8750%" height="15" fill="rgb(245,172,44)" fg:x="10694" fg:w="44880"/><text x="6.1772%" y="142.50">calculate_loss (src/trainers/match.py:19)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (44,880 samples, 24.88%)</title><rect x="5.9272%" y="148" width="24.8750%" height="15" fill="rgb(236,23,11)" fg:x="10694" fg:w="44880"/><text x="6.1772%" y="158.50">_wrapped_call_impl (torch/nn/modules/mod..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (44,874 samples, 24.87%)</title><rect x="5.9305%" y="164" width="24.8717%" height="15" fill="rgb(205,117,38)" fg:x="10700" fg:w="44874"/><text x="6.1805%" y="174.50">_call_impl (torch/nn/modules/module.py:1..</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (44,169 samples, 24.48%)</title><rect x="6.3213%" y="180" width="24.4809%" height="15" fill="rgb(237,72,25)" fg:x="11405" fg:w="44169"/><text x="6.5713%" y="190.50">forward (torch/nn/parallel/data_paralle..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (44,168 samples, 24.48%)</title><rect x="6.3218%" y="196" width="24.4804%" height="15" fill="rgb(244,70,9)" fg:x="11406" fg:w="44168"/><text x="6.5718%" y="206.50">_wrapped_call_impl (torch/nn/modules/mo..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (44,166 samples, 24.48%)</title><rect x="6.3230%" y="212" width="24.4793%" height="15" fill="rgb(217,125,39)" fg:x="11408" fg:w="44166"/><text x="6.5730%" y="222.50">_call_impl (torch/nn/modules/module.py:..</text></g><g><title>forward (src/models/draftrec.py:98) (1,005 samples, 0.56%)</title><rect x="30.2452%" y="228" width="0.5570%" height="15" fill="rgb(235,36,10)" fg:x="54569" fg:w="1005"/><text x="30.4952%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,005 samples, 0.56%)</title><rect x="30.2452%" y="244" width="0.5570%" height="15" fill="rgb(251,123,47)" fg:x="54569" fg:w="1005"/><text x="30.4952%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,005 samples, 0.56%)</title><rect x="30.2452%" y="260" width="0.5570%" height="15" fill="rgb(221,13,13)" fg:x="54569" fg:w="1005"/><text x="30.4952%" y="270.50"></text></g><g><title>forward (transformer.py:21) (373 samples, 0.21%)</title><rect x="30.5955%" y="276" width="0.2067%" height="15" fill="rgb(238,131,9)" fg:x="55201" fg:w="373"/><text x="30.8455%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (373 samples, 0.21%)</title><rect x="30.5955%" y="292" width="0.2067%" height="15" fill="rgb(211,50,8)" fg:x="55201" fg:w="373"/><text x="30.8455%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (373 samples, 0.21%)</title><rect x="30.5955%" y="308" width="0.2067%" height="15" fill="rgb(245,182,24)" fg:x="55201" fg:w="373"/><text x="30.8455%" y="318.50"></text></g><g><title>calculate_loss (src/trainers/match.py:21) (1,045 samples, 0.58%)</title><rect x="30.8022%" y="132" width="0.5792%" height="15" fill="rgb(242,14,37)" fg:x="55574" fg:w="1045"/><text x="31.0522%" y="142.50"></text></g><g><title>cross_entropy (torch/nn/functional.py:3479) (891 samples, 0.49%)</title><rect x="30.8876%" y="148" width="0.4938%" height="15" fill="rgb(246,228,12)" fg:x="55728" fg:w="891"/><text x="31.1376%" y="158.50"></text></g><g><title>calculate_loss (src/trainers/match.py:22) (275 samples, 0.15%)</title><rect x="31.3814%" y="132" width="0.1524%" height="15" fill="rgb(213,55,15)" fg:x="56619" fg:w="275"/><text x="31.6314%" y="142.50"></text></g><g><title>sigmoid (torch/nn/functional.py:2284) (236 samples, 0.13%)</title><rect x="31.4030%" y="148" width="0.1308%" height="15" fill="rgb(209,9,3)" fg:x="56658" fg:w="236"/><text x="31.6530%" y="158.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:140) (47,127 samples, 26.12%)</title><rect x="5.5143%" y="116" width="26.1204%" height="15" fill="rgb(230,59,30)" fg:x="9949" fg:w="47127"/><text x="5.7643%" y="126.50">train_one_epoch (src/trainers/base.py:140)</text></g><g><title>_make_grads (torch/autograd/__init__.py:220) (205 samples, 0.11%)</title><rect x="31.6857%" y="164" width="0.1136%" height="15" fill="rgb(209,121,21)" fg:x="57168" fg:w="205"/><text x="31.9357%" y="174.50"></text></g><g><title>backward (torch/autograd/__init__.py:340) (209 samples, 0.12%)</title><rect x="31.6852%" y="148" width="0.1158%" height="15" fill="rgb(220,109,13)" fg:x="57167" fg:w="209"/><text x="31.9352%" y="158.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:145) (21,767 samples, 12.06%)</title><rect x="31.6380%" y="116" width="12.0645%" height="15" fill="rgb(232,18,1)" fg:x="57082" fg:w="21767"/><text x="31.8880%" y="126.50">train_one_epoch (s..</text></g><g><title>backward (torch/_tensor.py:581) (21,767 samples, 12.06%)</title><rect x="31.6380%" y="132" width="12.0645%" height="15" fill="rgb(215,41,42)" fg:x="57082" fg:w="21767"/><text x="31.8880%" y="142.50">backward (torch/_t..</text></g><g><title>backward (torch/autograd/__init__.py:347) (21,473 samples, 11.90%)</title><rect x="31.8010%" y="148" width="11.9015%" height="15" fill="rgb(224,123,36)" fg:x="57376" fg:w="21473"/><text x="32.0510%" y="158.50">backward (torch/au..</text></g><g><title>_engine_run_backward (torch/autograd/graph.py:825) (21,472 samples, 11.90%)</title><rect x="31.8016%" y="164" width="11.9010%" height="15" fill="rgb(240,125,3)" fg:x="57377" fg:w="21472"/><text x="32.0516%" y="174.50">_engine_run_backwa..</text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:109) (320 samples, 0.18%)</title><rect x="43.8433%" y="148" width="0.1774%" height="15" fill="rgb(205,98,50)" fg:x="79103" fg:w="320"/><text x="44.0933%" y="158.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:122) (212 samples, 0.12%)</title><rect x="44.0229%" y="148" width="0.1175%" height="15" fill="rgb(205,185,37)" fg:x="79427" fg:w="212"/><text x="44.2729%" y="158.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:92) (675 samples, 0.37%)</title><rect x="44.2141%" y="148" width="0.3741%" height="15" fill="rgb(238,207,15)" fg:x="79772" fg:w="675"/><text x="44.4641%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (torch/nn/utils/clip_grad.py:92) (675 samples, 0.37%)</title><rect x="44.2141%" y="164" width="0.3741%" height="15" fill="rgb(213,199,42)" fg:x="79772" fg:w="675"/><text x="44.4641%" y="174.50"></text></g><g><title>_no_grad_wrapper (torch/nn/utils/clip_grad.py:30) (1,749 samples, 0.97%)</title><rect x="43.7663%" y="132" width="0.9694%" height="15" fill="rgb(235,201,11)" fg:x="78964" fg:w="1749"/><text x="44.0163%" y="142.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:95) (255 samples, 0.14%)</title><rect x="44.5943%" y="148" width="0.1413%" height="15" fill="rgb(207,46,11)" fg:x="80458" fg:w="255"/><text x="44.8443%" y="158.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:147) (1,863 samples, 1.03%)</title><rect x="43.7048%" y="116" width="1.0326%" height="15" fill="rgb(241,35,35)" fg:x="78853" fg:w="1863"/><text x="43.9548%" y="126.50"></text></g><g><title>__enter__ (torch/autograd/profiler.py:733) (353 samples, 0.20%)</title><rect x="44.7390%" y="164" width="0.1957%" height="15" fill="rgb(243,32,47)" fg:x="80719" fg:w="353"/><text x="44.9890%" y="174.50"></text></g><g><title>__call__ (torch/_ops.py:1116) (353 samples, 0.20%)</title><rect x="44.7390%" y="180" width="0.1957%" height="15" fill="rgb(247,202,23)" fg:x="80719" fg:w="353"/><text x="44.9890%" y="190.50"></text></g><g><title>wrapper (torch/optim/optimizer.py:472) (361 samples, 0.20%)</title><rect x="44.7384%" y="148" width="0.2001%" height="15" fill="rgb(219,102,11)" fg:x="80718" fg:w="361"/><text x="44.9884%" y="158.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:367) (275 samples, 0.15%)</title><rect x="45.0616%" y="228" width="0.1524%" height="15" fill="rgb(243,110,44)" fg:x="81301" fg:w="275"/><text x="45.3116%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:378) (455 samples, 0.25%)</title><rect x="45.2151%" y="228" width="0.2522%" height="15" fill="rgb(222,74,54)" fg:x="81578" fg:w="455"/><text x="45.4651%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:379) (752 samples, 0.42%)</title><rect x="45.4673%" y="228" width="0.4168%" height="15" fill="rgb(216,99,12)" fg:x="82033" fg:w="752"/><text x="45.7173%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:430) (290 samples, 0.16%)</title><rect x="45.8869%" y="228" width="0.1607%" height="15" fill="rgb(226,22,26)" fg:x="82790" fg:w="290"/><text x="46.1369%" y="238.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:148) (2,515 samples, 1.39%)</title><rect x="44.7373%" y="116" width="1.3940%" height="15" fill="rgb(217,163,10)" fg:x="80716" fg:w="2515"/><text x="44.9873%" y="126.50"></text></g><g><title>wrapper (torch/optim/lr_scheduler.py:137) (2,513 samples, 1.39%)</title><rect x="44.7384%" y="132" width="1.3928%" height="15" fill="rgb(213,25,53)" fg:x="80718" fg:w="2513"/><text x="44.9884%" y="142.50"></text></g><g><title>wrapper (torch/optim/optimizer.py:487) (2,149 samples, 1.19%)</title><rect x="44.9402%" y="148" width="1.1911%" height="15" fill="rgb(252,105,26)" fg:x="81082" fg:w="2149"/><text x="45.1902%" y="158.50"></text></g><g><title>_use_grad (torch/optim/optimizer.py:91) (2,142 samples, 1.19%)</title><rect x="44.9441%" y="164" width="1.1872%" height="15" fill="rgb(220,39,43)" fg:x="81089" fg:w="2142"/><text x="45.1941%" y="174.50"></text></g><g><title>step (torch/optim/adam.py:223) (2,110 samples, 1.17%)</title><rect x="44.9618%" y="180" width="1.1695%" height="15" fill="rgb(229,68,48)" fg:x="81121" fg:w="2110"/><text x="45.2118%" y="190.50"></text></g><g><title>maybe_fallback (torch/optim/optimizer.py:154) (2,109 samples, 1.17%)</title><rect x="44.9624%" y="196" width="1.1689%" height="15" fill="rgb(252,8,32)" fg:x="81122" fg:w="2109"/><text x="45.2124%" y="206.50"></text></g><g><title>adam (torch/optim/adam.py:784) (2,107 samples, 1.17%)</title><rect x="44.9635%" y="212" width="1.1678%" height="15" fill="rgb(223,20,43)" fg:x="81124" fg:w="2107"/><text x="45.2135%" y="222.50"></text></g><g><title>&lt;module&gt; (main.py:78) (82,928 samples, 45.96%)</title><rect x="0.1846%" y="68" width="45.9634%" height="15" fill="rgb(229,81,49)" fg:x="333" fg:w="82928"/><text x="0.4346%" y="78.50">&lt;module&gt; (main.py:78)</text></g><g><title>main (main.py:74) (82,750 samples, 45.86%)</title><rect x="0.2832%" y="84" width="45.8647%" height="15" fill="rgb(236,28,36)" fg:x="511" fg:w="82750"/><text x="0.5332%" y="94.50">main (main.py:74)</text></g><g><title>train (src/trainers/base.py:95) (74,718 samples, 41.41%)</title><rect x="4.7350%" y="100" width="41.4129%" height="15" fill="rgb(249,185,26)" fg:x="8543" fg:w="74718"/><text x="4.9850%" y="110.50">train (src/trainers/base.py:95)</text></g><g><title>_loop_check_status (wandb/sdk/wandb_run.py:235) (291 samples, 0.16%)</title><rect x="46.2006%" y="132" width="0.1613%" height="15" fill="rgb(249,174,33)" fg:x="83356" fg:w="291"/><text x="46.4506%" y="142.50"></text></g><g><title>deliver_internal_messages (wandb/sdk/interface/interface.py:914) (240 samples, 0.13%)</title><rect x="46.2288%" y="148" width="0.1330%" height="15" fill="rgb(233,201,37)" fg:x="83407" fg:w="240"/><text x="46.4788%" y="158.50"></text></g><g><title>check_internal_messages (wandb/sdk/wandb_run.py:325) (374 samples, 0.21%)</title><rect x="46.1912%" y="116" width="0.2073%" height="15" fill="rgb(221,78,26)" fg:x="83339" fg:w="374"/><text x="46.4412%" y="126.50"></text></g><g><title>wait (wandb/sdk/lib/mailbox.py:276) (243 samples, 0.13%)</title><rect x="46.4145%" y="148" width="0.1347%" height="15" fill="rgb(250,127,30)" fg:x="83742" fg:w="243"/><text x="46.6645%" y="158.50"></text></g><g><title>_transport_keepalive_failed (wandb/sdk/interface/interface_shared.py:526) (229 samples, 0.13%)</title><rect x="46.4223%" y="164" width="0.1269%" height="15" fill="rgb(230,49,44)" fg:x="83756" fg:w="229"/><text x="46.6723%" y="174.50"></text></g><g><title>_loop_check_status (wandb/sdk/wandb_run.py:243) (396 samples, 0.22%)</title><rect x="46.4023%" y="132" width="0.2195%" height="15" fill="rgb(229,67,23)" fg:x="83720" fg:w="396"/><text x="46.6523%" y="142.50"></text></g><g><title>check_network_status (wandb/sdk/wandb_run.py:281) (482 samples, 0.27%)</title><rect x="46.3984%" y="116" width="0.2672%" height="15" fill="rgb(249,83,47)" fg:x="83713" fg:w="482"/><text x="46.6484%" y="126.50"></text></g><g><title>_read_packet_bytes (wandb/sdk/lib/sock_client.py:256) (95,417 samples, 52.89%)</title><rect x="46.8297%" y="164" width="52.8855%" height="15" fill="rgb(215,43,3)" fg:x="84491" fg:w="95417"/><text x="47.0797%" y="174.50">_read_packet_bytes (wandb/sdk/lib/sock_client.py:256)</text></g><g><title>read_server_response (wandb/sdk/lib/sock_client.py:285) (95,700 samples, 53.04%)</title><rect x="46.7399%" y="148" width="53.0423%" height="15" fill="rgb(238,154,13)" fg:x="84329" fg:w="95700"/><text x="46.9899%" y="158.50">read_server_response (wandb/sdk/lib/sock_client.py:285)</text></g><g><title>_read_message (wandb/sdk/interface/router_sock.py:27) (95,758 samples, 53.07%)</title><rect x="46.7399%" y="132" width="53.0745%" height="15" fill="rgb(219,56,2)" fg:x="84329" fg:w="95758"/><text x="46.9899%" y="142.50">_read_message (wandb/sdk/interface/router_sock.py:27)</text></g><g><title>message_loop (wandb/sdk/interface/router.py:68) (95,771 samples, 53.08%)</title><rect x="46.7349%" y="116" width="53.0817%" height="15" fill="rgb(233,0,4)" fg:x="84320" fg:w="95771"/><text x="46.9849%" y="126.50">message_loop (wandb/sdk/interface/router.py:68)</text></g><g><title>run (threading.py:982) (96,824 samples, 53.67%)</title><rect x="46.1839%" y="100" width="53.6653%" height="15" fill="rgb(235,30,7)" fg:x="83326" fg:w="96824"/><text x="46.4339%" y="110.50">run (threading.py:982)</text></g><g><title>_bootstrap (threading.py:1002) (97,010 samples, 53.77%)</title><rect x="46.1839%" y="68" width="53.7684%" height="15" fill="rgb(250,79,13)" fg:x="83326" fg:w="97010"/><text x="46.4339%" y="78.50">_bootstrap (threading.py:1002)</text></g><g><title>_bootstrap_inner (threading.py:1045) (97,010 samples, 53.77%)</title><rect x="46.1839%" y="84" width="53.7684%" height="15" fill="rgb(211,146,34)" fg:x="83326" fg:w="97010"/><text x="46.4339%" y="94.50">_bootstrap_inner (threading.py:1045)</text></g><g><title>all (180,422 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="180422"/><text x="0.2500%" y="62.50"></text></g></svg></svg>