<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="762" onload="init(evt)" viewBox="0 0 1200 762" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="762" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile_4_worker_local_data_torch_where.svg -- python main.py --template draftrec --/Users/jk/Documents/project_data --use_parallel true</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="751.00"> </text><svg id="frames" x="10" width="1180" total_samples="163529"><g><title>&lt;module&gt; (main.py:15) (231 samples, 0.14%)</title><rect x="0.0037%" y="68" width="0.1413%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="231"/><text x="0.2537%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (231 samples, 0.14%)</title><rect x="0.0037%" y="84" width="0.1413%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="231"/><text x="0.2537%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (231 samples, 0.14%)</title><rect x="0.0037%" y="100" width="0.1413%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="231"/><text x="0.2537%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (231 samples, 0.14%)</title><rect x="0.0037%" y="116" width="0.1413%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="231"/><text x="0.2537%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (231 samples, 0.14%)</title><rect x="0.0037%" y="132" width="0.1413%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="231"/><text x="0.2537%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (231 samples, 0.14%)</title><rect x="0.0037%" y="148" width="0.1413%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="231"/><text x="0.2537%" y="158.50"></text></g><g><title>&lt;module&gt; (src/dataloaders/__init__.py:1) (231 samples, 0.14%)</title><rect x="0.0037%" y="164" width="0.1413%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="231"/><text x="0.2537%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (231 samples, 0.14%)</title><rect x="0.0037%" y="180" width="0.1413%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="231"/><text x="0.2537%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (231 samples, 0.14%)</title><rect x="0.0037%" y="196" width="0.1413%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="231"/><text x="0.2537%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (231 samples, 0.14%)</title><rect x="0.0037%" y="212" width="0.1413%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="231"/><text x="0.2537%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (231 samples, 0.14%)</title><rect x="0.0037%" y="228" width="0.1413%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="231"/><text x="0.2537%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (231 samples, 0.14%)</title><rect x="0.0037%" y="244" width="0.1413%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="231"/><text x="0.2537%" y="254.50"></text></g><g><title>&lt;module&gt; (src/dataloaders/base.py:1) (231 samples, 0.14%)</title><rect x="0.0037%" y="260" width="0.1413%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="231"/><text x="0.2537%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (231 samples, 0.14%)</title><rect x="0.0037%" y="276" width="0.1413%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="231"/><text x="0.2537%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (231 samples, 0.14%)</title><rect x="0.0037%" y="292" width="0.1413%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="231"/><text x="0.2537%" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (231 samples, 0.14%)</title><rect x="0.0037%" y="308" width="0.1413%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="231"/><text x="0.2537%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (231 samples, 0.14%)</title><rect x="0.0037%" y="324" width="0.1413%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="231"/><text x="0.2537%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (231 samples, 0.14%)</title><rect x="0.0037%" y="340" width="0.1413%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="231"/><text x="0.2537%" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (231 samples, 0.14%)</title><rect x="0.0037%" y="356" width="0.1413%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="231"/><text x="0.2537%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (231 samples, 0.14%)</title><rect x="0.0037%" y="372" width="0.1413%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="231"/><text x="0.2537%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (231 samples, 0.14%)</title><rect x="0.0037%" y="388" width="0.1413%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="231"/><text x="0.2537%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (231 samples, 0.14%)</title><rect x="0.0037%" y="404" width="0.1413%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="231"/><text x="0.2537%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (231 samples, 0.14%)</title><rect x="0.0037%" y="420" width="0.1413%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="231"/><text x="0.2537%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (231 samples, 0.14%)</title><rect x="0.0037%" y="436" width="0.1413%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="231"/><text x="0.2537%" y="446.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (171 samples, 0.10%)</title><rect x="0.2159%" y="388" width="0.1046%" height="15" fill="rgb(241,131,45)" fg:x="353" fg:w="171"/><text x="0.4659%" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (171 samples, 0.10%)</title><rect x="0.2159%" y="404" width="0.1046%" height="15" fill="rgb(249,31,29)" fg:x="353" fg:w="171"/><text x="0.4659%" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (171 samples, 0.10%)</title><rect x="0.2159%" y="420" width="0.1046%" height="15" fill="rgb(225,111,53)" fg:x="353" fg:w="171"/><text x="0.4659%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (171 samples, 0.10%)</title><rect x="0.2159%" y="436" width="0.1046%" height="15" fill="rgb(238,160,17)" fg:x="353" fg:w="171"/><text x="0.4659%" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (171 samples, 0.10%)</title><rect x="0.2159%" y="452" width="0.1046%" height="15" fill="rgb(214,148,48)" fg:x="353" fg:w="171"/><text x="0.4659%" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (171 samples, 0.10%)</title><rect x="0.2159%" y="468" width="0.1046%" height="15" fill="rgb(232,36,49)" fg:x="353" fg:w="171"/><text x="0.4659%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (171 samples, 0.10%)</title><rect x="0.2159%" y="484" width="0.1046%" height="15" fill="rgb(209,103,24)" fg:x="353" fg:w="171"/><text x="0.4659%" y="494.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:84) (171 samples, 0.10%)</title><rect x="0.2159%" y="500" width="0.1046%" height="15" fill="rgb(229,88,8)" fg:x="353" fg:w="171"/><text x="0.4659%" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (171 samples, 0.10%)</title><rect x="0.2159%" y="516" width="0.1046%" height="15" fill="rgb(213,181,19)" fg:x="353" fg:w="171"/><text x="0.4659%" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (171 samples, 0.10%)</title><rect x="0.2159%" y="532" width="0.1046%" height="15" fill="rgb(254,191,54)" fg:x="353" fg:w="171"/><text x="0.4659%" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (171 samples, 0.10%)</title><rect x="0.2159%" y="548" width="0.1046%" height="15" fill="rgb(241,83,37)" fg:x="353" fg:w="171"/><text x="0.4659%" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (171 samples, 0.10%)</title><rect x="0.2159%" y="564" width="0.1046%" height="15" fill="rgb(233,36,39)" fg:x="353" fg:w="171"/><text x="0.4659%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (171 samples, 0.10%)</title><rect x="0.2159%" y="580" width="0.1046%" height="15" fill="rgb(226,3,54)" fg:x="353" fg:w="171"/><text x="0.4659%" y="590.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:19) (171 samples, 0.10%)</title><rect x="0.2159%" y="596" width="0.1046%" height="15" fill="rgb(245,192,40)" fg:x="353" fg:w="171"/><text x="0.4659%" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (171 samples, 0.10%)</title><rect x="0.2159%" y="612" width="0.1046%" height="15" fill="rgb(238,167,29)" fg:x="353" fg:w="171"/><text x="0.4659%" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1126) (171 samples, 0.10%)</title><rect x="0.2159%" y="628" width="0.1046%" height="15" fill="rgb(232,182,51)" fg:x="353" fg:w="171"/><text x="0.4659%" y="638.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (171 samples, 0.10%)</title><rect x="0.2159%" y="644" width="0.1046%" height="15" fill="rgb(231,60,39)" fg:x="353" fg:w="171"/><text x="0.4659%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (171 samples, 0.10%)</title><rect x="0.2159%" y="660" width="0.1046%" height="15" fill="rgb(208,69,12)" fg:x="353" fg:w="171"/><text x="0.4659%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (171 samples, 0.10%)</title><rect x="0.2159%" y="676" width="0.1046%" height="15" fill="rgb(235,93,37)" fg:x="353" fg:w="171"/><text x="0.4659%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (171 samples, 0.10%)</title><rect x="0.2159%" y="692" width="0.1046%" height="15" fill="rgb(213,116,39)" fg:x="353" fg:w="171"/><text x="0.4659%" y="702.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (171 samples, 0.10%)</title><rect x="0.2159%" y="708" width="0.1046%" height="15" fill="rgb(222,207,29)" fg:x="353" fg:w="171"/><text x="0.4659%" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (171 samples, 0.10%)</title><rect x="0.2159%" y="724" width="0.1046%" height="15" fill="rgb(206,96,30)" fg:x="353" fg:w="171"/><text x="0.4659%" y="734.50"></text></g><g><title>&lt;module&gt; (src/trainers/__init__.py:1) (300 samples, 0.18%)</title><rect x="0.1455%" y="164" width="0.1835%" height="15" fill="rgb(218,138,4)" fg:x="238" fg:w="300"/><text x="0.3955%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (300 samples, 0.18%)</title><rect x="0.1455%" y="180" width="0.1835%" height="15" fill="rgb(250,191,14)" fg:x="238" fg:w="300"/><text x="0.3955%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (299 samples, 0.18%)</title><rect x="0.1462%" y="196" width="0.1828%" height="15" fill="rgb(239,60,40)" fg:x="239" fg:w="299"/><text x="0.3962%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (298 samples, 0.18%)</title><rect x="0.1468%" y="212" width="0.1822%" height="15" fill="rgb(206,27,48)" fg:x="240" fg:w="298"/><text x="0.3968%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (298 samples, 0.18%)</title><rect x="0.1468%" y="228" width="0.1822%" height="15" fill="rgb(225,35,8)" fg:x="240" fg:w="298"/><text x="0.3968%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (298 samples, 0.18%)</title><rect x="0.1468%" y="244" width="0.1822%" height="15" fill="rgb(250,213,24)" fg:x="240" fg:w="298"/><text x="0.3968%" y="254.50"></text></g><g><title>&lt;module&gt; (src/trainers/base.py:2) (185 samples, 0.11%)</title><rect x="0.2159%" y="260" width="0.1131%" height="15" fill="rgb(247,123,22)" fg:x="353" fg:w="185"/><text x="0.4659%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (185 samples, 0.11%)</title><rect x="0.2159%" y="276" width="0.1131%" height="15" fill="rgb(231,138,38)" fg:x="353" fg:w="185"/><text x="0.4659%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (185 samples, 0.11%)</title><rect x="0.2159%" y="292" width="0.1131%" height="15" fill="rgb(231,145,46)" fg:x="353" fg:w="185"/><text x="0.4659%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (185 samples, 0.11%)</title><rect x="0.2159%" y="308" width="0.1131%" height="15" fill="rgb(251,118,11)" fg:x="353" fg:w="185"/><text x="0.4659%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (185 samples, 0.11%)</title><rect x="0.2159%" y="324" width="0.1131%" height="15" fill="rgb(217,147,25)" fg:x="353" fg:w="185"/><text x="0.4659%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (185 samples, 0.11%)</title><rect x="0.2159%" y="340" width="0.1131%" height="15" fill="rgb(247,81,37)" fg:x="353" fg:w="185"/><text x="0.4659%" y="350.50"></text></g><g><title>&lt;module&gt; (src/common/metrics.py:2) (185 samples, 0.11%)</title><rect x="0.2159%" y="356" width="0.1131%" height="15" fill="rgb(209,12,38)" fg:x="353" fg:w="185"/><text x="0.4659%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (185 samples, 0.11%)</title><rect x="0.2159%" y="372" width="0.1131%" height="15" fill="rgb(227,1,9)" fg:x="353" fg:w="185"/><text x="0.4659%" y="382.50"></text></g><g><title>&lt;module&gt; (main.py:17) (301 samples, 0.18%)</title><rect x="0.1455%" y="68" width="0.1841%" height="15" fill="rgb(248,47,43)" fg:x="238" fg:w="301"/><text x="0.3955%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (301 samples, 0.18%)</title><rect x="0.1455%" y="84" width="0.1841%" height="15" fill="rgb(221,10,30)" fg:x="238" fg:w="301"/><text x="0.3955%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (301 samples, 0.18%)</title><rect x="0.1455%" y="100" width="0.1841%" height="15" fill="rgb(210,229,1)" fg:x="238" fg:w="301"/><text x="0.3955%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (301 samples, 0.18%)</title><rect x="0.1455%" y="116" width="0.1841%" height="15" fill="rgb(222,148,37)" fg:x="238" fg:w="301"/><text x="0.3955%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (301 samples, 0.18%)</title><rect x="0.1455%" y="132" width="0.1841%" height="15" fill="rgb(234,67,33)" fg:x="238" fg:w="301"/><text x="0.3955%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (301 samples, 0.18%)</title><rect x="0.1455%" y="148" width="0.1841%" height="15" fill="rgb(247,98,35)" fg:x="238" fg:w="301"/><text x="0.3955%" y="158.50"></text></g><g><title>__init__ (src/trainers/base.py:30) (172 samples, 0.11%)</title><rect x="0.3480%" y="132" width="0.1052%" height="15" fill="rgb(247,138,52)" fg:x="569" fg:w="172"/><text x="0.5980%" y="142.50"></text></g><g><title>_create_optimizer (src/trainers/base.py:46) (172 samples, 0.11%)</title><rect x="0.3480%" y="148" width="0.1052%" height="15" fill="rgb(213,79,30)" fg:x="569" fg:w="172"/><text x="0.5980%" y="158.50"></text></g><g><title>__init__ (torch/optim/adam.py:78) (172 samples, 0.11%)</title><rect x="0.3480%" y="164" width="0.1052%" height="15" fill="rgb(246,177,23)" fg:x="569" fg:w="172"/><text x="0.5980%" y="174.50"></text></g><g><title>__init__ (torch/optim/optimizer.py:371) (172 samples, 0.11%)</title><rect x="0.3480%" y="180" width="0.1052%" height="15" fill="rgb(230,62,27)" fg:x="569" fg:w="172"/><text x="0.5980%" y="190.50"></text></g><g><title>inner (torch/_compile.py:27) (172 samples, 0.11%)</title><rect x="0.3480%" y="196" width="0.1052%" height="15" fill="rgb(216,154,8)" fg:x="569" fg:w="172"/><text x="0.5980%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (172 samples, 0.11%)</title><rect x="0.3480%" y="212" width="0.1052%" height="15" fill="rgb(244,35,45)" fg:x="569" fg:w="172"/><text x="0.5980%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (171 samples, 0.10%)</title><rect x="0.3486%" y="228" width="0.1046%" height="15" fill="rgb(251,115,12)" fg:x="570" fg:w="171"/><text x="0.5986%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (171 samples, 0.10%)</title><rect x="0.3486%" y="244" width="0.1046%" height="15" fill="rgb(240,54,50)" fg:x="570" fg:w="171"/><text x="0.5986%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (171 samples, 0.10%)</title><rect x="0.3486%" y="260" width="0.1046%" height="15" fill="rgb(233,84,52)" fg:x="570" fg:w="171"/><text x="0.5986%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (171 samples, 0.10%)</title><rect x="0.3486%" y="276" width="0.1046%" height="15" fill="rgb(207,117,47)" fg:x="570" fg:w="171"/><text x="0.5986%" y="286.50"></text></g><g><title>main (main.py:69) (238 samples, 0.15%)</title><rect x="0.3467%" y="84" width="0.1455%" height="15" fill="rgb(249,43,39)" fg:x="567" fg:w="238"/><text x="0.5967%" y="94.50"></text></g><g><title>init_trainer (src/trainers/__init__.py:13) (238 samples, 0.15%)</title><rect x="0.3467%" y="100" width="0.1455%" height="15" fill="rgb(209,38,44)" fg:x="567" fg:w="238"/><text x="0.5967%" y="110.50"></text></g><g><title>__init__ (src/trainers/match.py:11) (238 samples, 0.15%)</title><rect x="0.3467%" y="116" width="0.1455%" height="15" fill="rgb(236,212,23)" fg:x="567" fg:w="238"/><text x="0.5967%" y="126.50"></text></g><g><title>forward (src/models/draftrec.py:124) (1,214 samples, 0.74%)</title><rect x="0.6409%" y="228" width="0.7424%" height="15" fill="rgb(242,79,21)" fg:x="1048" fg:w="1214"/><text x="0.8909%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,486 samples, 0.91%)</title><rect x="0.5357%" y="132" width="0.9087%" height="15" fill="rgb(211,96,35)" fg:x="876" fg:w="1486"/><text x="0.7857%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,485 samples, 0.91%)</title><rect x="0.5363%" y="148" width="0.9081%" height="15" fill="rgb(253,215,40)" fg:x="877" fg:w="1485"/><text x="0.7863%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,484 samples, 0.91%)</title><rect x="0.5369%" y="164" width="0.9075%" height="15" fill="rgb(211,81,21)" fg:x="878" fg:w="1484"/><text x="0.7869%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,483 samples, 0.91%)</title><rect x="0.5375%" y="180" width="0.9069%" height="15" fill="rgb(208,190,38)" fg:x="879" fg:w="1483"/><text x="0.7875%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,483 samples, 0.91%)</title><rect x="0.5375%" y="196" width="0.9069%" height="15" fill="rgb(235,213,38)" fg:x="879" fg:w="1483"/><text x="0.7875%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,483 samples, 0.91%)</title><rect x="0.5375%" y="212" width="0.9069%" height="15" fill="rgb(237,122,38)" fg:x="879" fg:w="1483"/><text x="0.7875%" y="222.50"></text></g><g><title>train (src/trainers/base.py:103) (1,740 samples, 1.06%)</title><rect x="0.4923%" y="100" width="1.0640%" height="15" fill="rgb(244,218,35)" fg:x="805" fg:w="1740"/><text x="0.7423%" y="110.50"></text></g><g><title>validate (src/trainers/base.py:181) (1,669 samples, 1.02%)</title><rect x="0.5357%" y="116" width="1.0206%" height="15" fill="rgb(240,68,47)" fg:x="876" fg:w="1669"/><text x="0.7857%" y="126.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:50) (169 samples, 0.10%)</title><rect x="1.4530%" y="132" width="0.1033%" height="15" fill="rgb(210,16,53)" fg:x="2376" fg:w="169"/><text x="1.7030%" y="142.50"></text></g><g><title>forward (src/models/draftrec.py:124) (3,814 samples, 2.33%)</title><rect x="1.8272%" y="228" width="2.3323%" height="15" fill="rgb(235,124,12)" fg:x="2988" fg:w="3814"/><text x="2.0772%" y="238.50">f..</text></g><g><title>calculate_metrics (src/trainers/match.py:36) (4,188 samples, 2.56%)</title><rect x="1.7080%" y="132" width="2.5610%" height="15" fill="rgb(224,169,11)" fg:x="2793" fg:w="4188"/><text x="1.9580%" y="142.50">ca..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (4,187 samples, 2.56%)</title><rect x="1.7086%" y="148" width="2.5604%" height="15" fill="rgb(250,166,2)" fg:x="2794" fg:w="4187"/><text x="1.9586%" y="158.50">_w..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (4,186 samples, 2.56%)</title><rect x="1.7092%" y="164" width="2.5598%" height="15" fill="rgb(242,216,29)" fg:x="2795" fg:w="4186"/><text x="1.9592%" y="174.50">_c..</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (4,186 samples, 2.56%)</title><rect x="1.7092%" y="180" width="2.5598%" height="15" fill="rgb(230,116,27)" fg:x="2795" fg:w="4186"/><text x="1.9592%" y="190.50">fo..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (4,186 samples, 2.56%)</title><rect x="1.7092%" y="196" width="2.5598%" height="15" fill="rgb(228,99,48)" fg:x="2795" fg:w="4186"/><text x="1.9592%" y="206.50">_w..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (4,186 samples, 2.56%)</title><rect x="1.7092%" y="212" width="2.5598%" height="15" fill="rgb(253,11,6)" fg:x="2795" fg:w="4186"/><text x="1.9592%" y="222.50">_c..</text></g><g><title>_dcg_sample_scores (sklearn/metrics/_ranking.py:1520) (249 samples, 0.15%)</title><rect x="4.3313%" y="228" width="0.1523%" height="15" fill="rgb(247,143,39)" fg:x="7083" fg:w="249"/><text x="4.5813%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/metrics/_ranking.py:1521) (249 samples, 0.15%)</title><rect x="4.3313%" y="244" width="0.1523%" height="15" fill="rgb(236,97,10)" fg:x="7083" fg:w="249"/><text x="4.5813%" y="254.50"></text></g><g><title>_ndcg_sample_scores (sklearn/metrics/_ranking.py:1749) (250 samples, 0.15%)</title><rect x="4.3313%" y="212" width="0.1529%" height="15" fill="rgb(233,208,19)" fg:x="7083" fg:w="250"/><text x="4.5813%" y="222.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:50) (345 samples, 0.21%)</title><rect x="4.2763%" y="132" width="0.2110%" height="15" fill="rgb(216,164,2)" fg:x="6993" fg:w="345"/><text x="4.5263%" y="142.50"></text></g><g><title>get_recommendation_metrics_for_ks (src/common/metrics.py:103) (270 samples, 0.17%)</title><rect x="4.3222%" y="148" width="0.1651%" height="15" fill="rgb(220,129,5)" fg:x="7068" fg:w="270"/><text x="4.5722%" y="158.50"></text></g><g><title>ndcg_at_k (src/common/metrics.py:93) (270 samples, 0.17%)</title><rect x="4.3222%" y="164" width="0.1651%" height="15" fill="rgb(242,17,10)" fg:x="7068" fg:w="270"/><text x="4.5722%" y="174.50"></text></g><g><title>wrapper (sklearn/utils/_param_validation.py:213) (269 samples, 0.16%)</title><rect x="4.3228%" y="180" width="0.1645%" height="15" fill="rgb(242,107,0)" fg:x="7069" fg:w="269"/><text x="4.5728%" y="190.50"></text></g><g><title>ndcg_score (sklearn/metrics/_ranking.py:1876) (255 samples, 0.16%)</title><rect x="4.3313%" y="196" width="0.1559%" height="15" fill="rgb(251,28,31)" fg:x="7083" fg:w="255"/><text x="4.5813%" y="206.50"></text></g><g><title>validate (src/trainers/base.py:181) (4,546 samples, 2.78%)</title><rect x="1.7080%" y="116" width="2.7799%" height="15" fill="rgb(233,223,10)" fg:x="2793" fg:w="4546"/><text x="1.9580%" y="126.50">va..</text></g><g><title>train (src/trainers/base.py:123) (4,757 samples, 2.91%)</title><rect x="1.5826%" y="100" width="2.9090%" height="15" fill="rgb(215,21,27)" fg:x="2588" fg:w="4757"/><text x="1.8326%" y="110.50">tr..</text></g><g><title>forward (src/models/draftrec.py:124) (1,327 samples, 0.81%)</title><rect x="4.5711%" y="228" width="0.8115%" height="15" fill="rgb(232,23,21)" fg:x="7475" fg:w="1327"/><text x="4.8211%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,498 samples, 0.92%)</title><rect x="4.5148%" y="132" width="0.9160%" height="15" fill="rgb(244,5,23)" fg:x="7383" fg:w="1498"/><text x="4.7648%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,498 samples, 0.92%)</title><rect x="4.5148%" y="148" width="0.9160%" height="15" fill="rgb(226,81,46)" fg:x="7383" fg:w="1498"/><text x="4.7648%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,498 samples, 0.92%)</title><rect x="4.5148%" y="164" width="0.9160%" height="15" fill="rgb(247,70,30)" fg:x="7383" fg:w="1498"/><text x="4.7648%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,498 samples, 0.92%)</title><rect x="4.5148%" y="180" width="0.9160%" height="15" fill="rgb(212,68,19)" fg:x="7383" fg:w="1498"/><text x="4.7648%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,498 samples, 0.92%)</title><rect x="4.5148%" y="196" width="0.9160%" height="15" fill="rgb(240,187,13)" fg:x="7383" fg:w="1498"/><text x="4.7648%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,498 samples, 0.92%)</title><rect x="4.5148%" y="212" width="0.9160%" height="15" fill="rgb(223,113,26)" fg:x="7383" fg:w="1498"/><text x="4.7648%" y="222.50"></text></g><g><title>validate (src/trainers/base.py:181) (1,651 samples, 1.01%)</title><rect x="4.5148%" y="116" width="1.0096%" height="15" fill="rgb(206,192,2)" fg:x="7383" fg:w="1651"/><text x="4.7648%" y="126.50"></text></g><g><title>train (src/trainers/base.py:86) (1,691 samples, 1.03%)</title><rect x="4.4916%" y="100" width="1.0341%" height="15" fill="rgb(241,108,4)" fg:x="7345" fg:w="1691"/><text x="4.7416%" y="110.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:133) (178 samples, 0.11%)</title><rect x="5.5262%" y="116" width="0.1088%" height="15" fill="rgb(247,173,49)" fg:x="9037" fg:w="178"/><text x="5.7762%" y="126.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:137) (1,069 samples, 0.65%)</title><rect x="5.6351%" y="116" width="0.6537%" height="15" fill="rgb(224,114,35)" fg:x="9215" fg:w="1069"/><text x="5.8851%" y="126.50"></text></g><g><title>&lt;dictcomp&gt; (src/trainers/base.py:137) (1,069 samples, 0.65%)</title><rect x="5.6351%" y="132" width="0.6537%" height="15" fill="rgb(245,159,27)" fg:x="9215" fg:w="1069"/><text x="5.8851%" y="142.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:171) (401 samples, 0.25%)</title><rect x="6.5897%" y="180" width="0.2452%" height="15" fill="rgb(245,172,44)" fg:x="10776" fg:w="401"/><text x="6.8397%" y="190.50"></text></g><g><title>__exit__ (torch/autograd/profiler.py:750) (356 samples, 0.22%)</title><rect x="6.6172%" y="196" width="0.2177%" height="15" fill="rgb(236,23,11)" fg:x="10821" fg:w="356"/><text x="6.8672%" y="206.50"></text></g><g><title>__call__ (torch/_ops.py:953) (344 samples, 0.21%)</title><rect x="6.6245%" y="212" width="0.2104%" height="15" fill="rgb(205,117,38)" fg:x="10833" fg:w="344"/><text x="6.8745%" y="222.50"></text></g><g><title>&lt;lambda&gt; (transformer.py:20) (187 samples, 0.11%)</title><rect x="6.9590%" y="340" width="0.1144%" height="15" fill="rgb(237,72,25)" fg:x="11380" fg:w="187"/><text x="7.2090%" y="350.50"></text></g><g><title>forward (layers.py:57) (223 samples, 0.14%)</title><rect x="6.9590%" y="324" width="0.1364%" height="15" fill="rgb(244,70,9)" fg:x="11380" fg:w="223"/><text x="7.2090%" y="334.50"></text></g><g><title>forward (transformer.py:20) (351 samples, 0.21%)</title><rect x="6.9590%" y="276" width="0.2146%" height="15" fill="rgb(217,125,39)" fg:x="11380" fg:w="351"/><text x="7.2090%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (351 samples, 0.21%)</title><rect x="6.9590%" y="292" width="0.2146%" height="15" fill="rgb(235,36,10)" fg:x="11380" fg:w="351"/><text x="7.2090%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (351 samples, 0.21%)</title><rect x="6.9590%" y="308" width="0.2146%" height="15" fill="rgb(251,123,47)" fg:x="11380" fg:w="351"/><text x="7.2090%" y="318.50"></text></g><g><title>forward (transformer.py:78) (239 samples, 0.15%)</title><rect x="7.2886%" y="372" width="0.1462%" height="15" fill="rgb(221,13,13)" fg:x="11919" fg:w="239"/><text x="7.5386%" y="382.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (238 samples, 0.15%)</title><rect x="7.2892%" y="388" width="0.1455%" height="15" fill="rgb(238,131,9)" fg:x="11920" fg:w="238"/><text x="7.5392%" y="398.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (238 samples, 0.15%)</title><rect x="7.2892%" y="404" width="0.1455%" height="15" fill="rgb(211,50,8)" fg:x="11920" fg:w="238"/><text x="7.5392%" y="414.50"></text></g><g><title>forward (layers.py:32) (238 samples, 0.15%)</title><rect x="7.2892%" y="420" width="0.1455%" height="15" fill="rgb(245,182,24)" fg:x="11920" fg:w="238"/><text x="7.5392%" y="430.50"></text></g><g><title>forward (layers.py:57) (532 samples, 0.33%)</title><rect x="7.1743%" y="324" width="0.3253%" height="15" fill="rgb(242,14,37)" fg:x="11732" fg:w="532"/><text x="7.4243%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (531 samples, 0.32%)</title><rect x="7.1749%" y="340" width="0.3247%" height="15" fill="rgb(246,228,12)" fg:x="11733" fg:w="531"/><text x="7.4249%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (531 samples, 0.32%)</title><rect x="7.1749%" y="356" width="0.3247%" height="15" fill="rgb(213,55,15)" fg:x="11733" fg:w="531"/><text x="7.4249%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:116) (892 samples, 0.55%)</title><rect x="6.9590%" y="228" width="0.5455%" height="15" fill="rgb(209,9,3)" fg:x="11380" fg:w="892"/><text x="7.2090%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (892 samples, 0.55%)</title><rect x="6.9590%" y="244" width="0.5455%" height="15" fill="rgb(230,59,30)" fg:x="11380" fg:w="892"/><text x="7.2090%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (892 samples, 0.55%)</title><rect x="6.9590%" y="260" width="0.5455%" height="15" fill="rgb(209,121,21)" fg:x="11380" fg:w="892"/><text x="7.2090%" y="270.50"></text></g><g><title>forward (transformer.py:21) (541 samples, 0.33%)</title><rect x="7.1737%" y="276" width="0.3308%" height="15" fill="rgb(220,109,13)" fg:x="11731" fg:w="541"/><text x="7.4237%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (540 samples, 0.33%)</title><rect x="7.1743%" y="292" width="0.3302%" height="15" fill="rgb(232,18,1)" fg:x="11732" fg:w="540"/><text x="7.4243%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (540 samples, 0.33%)</title><rect x="7.1743%" y="308" width="0.3302%" height="15" fill="rgb(215,41,42)" fg:x="11732" fg:w="540"/><text x="7.4243%" y="318.50"></text></g><g><title>forward (src/models/draftrec.py:124) (36,213 samples, 22.14%)</title><rect x="7.5589%" y="228" width="22.1447%" height="15" fill="rgb(224,123,36)" fg:x="12361" fg:w="36213"/><text x="7.8089%" y="238.50">forward (src/models/draftrec.py:124)</text></g><g><title>forward (src/models/draftrec.py:125) (336 samples, 0.21%)</title><rect x="29.7036%" y="228" width="0.2055%" height="15" fill="rgb(240,125,3)" fg:x="48574" fg:w="336"/><text x="29.9536%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:129) (462 samples, 0.28%)</title><rect x="29.9091%" y="228" width="0.2825%" height="15" fill="rgb(205,98,50)" fg:x="48910" fg:w="462"/><text x="30.1591%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:130) (369 samples, 0.23%)</title><rect x="30.1916%" y="228" width="0.2256%" height="15" fill="rgb(205,185,37)" fg:x="49372" fg:w="369"/><text x="30.4416%" y="238.50"></text></g><g><title>forward (layers.py:32) (462 samples, 0.28%)</title><rect x="30.5047%" y="372" width="0.2825%" height="15" fill="rgb(238,207,15)" fg:x="49884" fg:w="462"/><text x="30.7547%" y="382.50"></text></g><g><title>forward (src/models/heads/__init__.py:33) (604 samples, 0.37%)</title><rect x="30.4986%" y="276" width="0.3694%" height="15" fill="rgb(213,199,42)" fg:x="49874" fg:w="604"/><text x="30.7486%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (599 samples, 0.37%)</title><rect x="30.5016%" y="292" width="0.3663%" height="15" fill="rgb(235,201,11)" fg:x="49879" fg:w="599"/><text x="30.7516%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (597 samples, 0.37%)</title><rect x="30.5028%" y="308" width="0.3651%" height="15" fill="rgb(207,46,11)" fg:x="49881" fg:w="597"/><text x="30.7528%" y="318.50"></text></g><g><title>forward (torch/nn/modules/container.py:250) (595 samples, 0.36%)</title><rect x="30.5041%" y="324" width="0.3638%" height="15" fill="rgb(241,35,35)" fg:x="49883" fg:w="595"/><text x="30.7541%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (595 samples, 0.36%)</title><rect x="30.5041%" y="340" width="0.3638%" height="15" fill="rgb(243,32,47)" fg:x="49883" fg:w="595"/><text x="30.7541%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (594 samples, 0.36%)</title><rect x="30.5047%" y="356" width="0.3632%" height="15" fill="rgb(247,202,23)" fg:x="49884" fg:w="594"/><text x="30.7547%" y="366.50"></text></g><g><title>forward (src/models/heads/__init__.py:40) (166 samples, 0.10%)</title><rect x="30.8679%" y="276" width="0.1015%" height="15" fill="rgb(219,102,11)" fg:x="50478" fg:w="166"/><text x="31.1179%" y="286.50"></text></g><g><title>forward (src/models/heads/__init__.py:41) (461 samples, 0.28%)</title><rect x="30.9694%" y="276" width="0.2819%" height="15" fill="rgb(243,110,44)" fg:x="50644" fg:w="461"/><text x="31.2194%" y="286.50"></text></g><g><title>forward (src/models/draftrec.py:132) (1,468 samples, 0.90%)</title><rect x="30.4600%" y="228" width="0.8977%" height="15" fill="rgb(222,74,54)" fg:x="49811" fg:w="1468"/><text x="30.7100%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,464 samples, 0.90%)</title><rect x="30.4625%" y="244" width="0.8953%" height="15" fill="rgb(216,99,12)" fg:x="49815" fg:w="1464"/><text x="30.7125%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,406 samples, 0.86%)</title><rect x="30.4980%" y="260" width="0.8598%" height="15" fill="rgb(226,22,26)" fg:x="49873" fg:w="1406"/><text x="30.7480%" y="270.50"></text></g><g><title>forward (src/models/heads/__init__.py:42) (174 samples, 0.11%)</title><rect x="31.2513%" y="276" width="0.1064%" height="15" fill="rgb(217,163,10)" fg:x="51105" fg:w="174"/><text x="31.5013%" y="286.50"></text></g><g><title>forward (src/models/draftrec.py:134) (1,110 samples, 0.68%)</title><rect x="31.3577%" y="228" width="0.6788%" height="15" fill="rgb(213,25,53)" fg:x="51279" fg:w="1110"/><text x="31.6077%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:139) (183 samples, 0.11%)</title><rect x="32.0512%" y="228" width="0.1119%" height="15" fill="rgb(252,105,26)" fg:x="52413" fg:w="183"/><text x="32.3012%" y="238.50"></text></g><g><title>forward (src/models/draftrec.py:94) (365 samples, 0.22%)</title><rect x="32.2677%" y="228" width="0.2232%" height="15" fill="rgb(220,39,43)" fg:x="52767" fg:w="365"/><text x="32.5177%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (364 samples, 0.22%)</title><rect x="32.2683%" y="244" width="0.2226%" height="15" fill="rgb(229,68,48)" fg:x="52768" fg:w="364"/><text x="32.5183%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (364 samples, 0.22%)</title><rect x="32.2683%" y="260" width="0.2226%" height="15" fill="rgb(252,8,32)" fg:x="52768" fg:w="364"/><text x="32.5183%" y="270.50"></text></g><g><title>forward (torch/nn/modules/dropout.py:70) (364 samples, 0.22%)</title><rect x="32.2683%" y="276" width="0.2226%" height="15" fill="rgb(223,20,43)" fg:x="52768" fg:w="364"/><text x="32.5183%" y="286.50"></text></g><g><title>dropout (torch/nn/functional.py:1425) (364 samples, 0.22%)</title><rect x="32.2683%" y="292" width="0.2226%" height="15" fill="rgb(229,81,49)" fg:x="52768" fg:w="364"/><text x="32.5183%" y="302.50"></text></g><g><title>&lt;lambda&gt; (transformer.py:20) (169 samples, 0.10%)</title><rect x="32.4909%" y="340" width="0.1033%" height="15" fill="rgb(236,28,36)" fg:x="53132" fg:w="169"/><text x="32.7409%" y="350.50"></text></g><g><title>forward (layers.py:57) (292 samples, 0.18%)</title><rect x="32.4909%" y="324" width="0.1786%" height="15" fill="rgb(249,185,26)" fg:x="53132" fg:w="292"/><text x="32.7409%" y="334.50"></text></g><g><title>forward (transformer.py:20) (304 samples, 0.19%)</title><rect x="32.4909%" y="276" width="0.1859%" height="15" fill="rgb(249,174,33)" fg:x="53132" fg:w="304"/><text x="32.7409%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (304 samples, 0.19%)</title><rect x="32.4909%" y="292" width="0.1859%" height="15" fill="rgb(233,201,37)" fg:x="53132" fg:w="304"/><text x="32.7409%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (304 samples, 0.19%)</title><rect x="32.4909%" y="308" width="0.1859%" height="15" fill="rgb(221,78,26)" fg:x="53132" fg:w="304"/><text x="32.7409%" y="318.50"></text></g><g><title>forward (layers.py:57) (409 samples, 0.25%)</title><rect x="32.6768%" y="324" width="0.2501%" height="15" fill="rgb(250,127,30)" fg:x="53436" fg:w="409"/><text x="32.9268%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (409 samples, 0.25%)</title><rect x="32.6768%" y="340" width="0.2501%" height="15" fill="rgb(230,49,44)" fg:x="53436" fg:w="409"/><text x="32.9268%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (409 samples, 0.25%)</title><rect x="32.6768%" y="356" width="0.2501%" height="15" fill="rgb(229,67,23)" fg:x="53436" fg:w="409"/><text x="32.9268%" y="366.50"></text></g><g><title>calculate_loss (src/trainers/match.py:19) (43,213 samples, 26.43%)</title><rect x="6.5884%" y="132" width="26.4253%" height="15" fill="rgb(249,83,47)" fg:x="10774" fg:w="43213"/><text x="6.8384%" y="142.50">calculate_loss (src/trainers/match.py:19)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (43,212 samples, 26.42%)</title><rect x="6.5890%" y="148" width="26.4247%" height="15" fill="rgb(215,43,3)" fg:x="10775" fg:w="43212"/><text x="6.8390%" y="158.50">_wrapped_call_impl (torch/nn/modules/modul..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (43,212 samples, 26.42%)</title><rect x="6.5890%" y="164" width="26.4247%" height="15" fill="rgb(238,154,13)" fg:x="10775" fg:w="43212"/><text x="6.8390%" y="174.50">_call_impl (torch/nn/modules/module.py:174..</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (42,810 samples, 26.18%)</title><rect x="6.8349%" y="180" width="26.1788%" height="15" fill="rgb(219,56,2)" fg:x="11177" fg:w="42810"/><text x="7.0849%" y="190.50">forward (torch/nn/parallel/data_parallel.p..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (42,810 samples, 26.18%)</title><rect x="6.8349%" y="196" width="26.1788%" height="15" fill="rgb(233,0,4)" fg:x="11177" fg:w="42810"/><text x="7.0849%" y="206.50">_wrapped_call_impl (torch/nn/modules/modul..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (42,810 samples, 26.18%)</title><rect x="6.8349%" y="212" width="26.1788%" height="15" fill="rgb(235,30,7)" fg:x="11177" fg:w="42810"/><text x="7.0849%" y="222.50">_call_impl (torch/nn/modules/module.py:174..</text></g><g><title>forward (src/models/draftrec.py:98) (855 samples, 0.52%)</title><rect x="32.4909%" y="228" width="0.5228%" height="15" fill="rgb(250,79,13)" fg:x="53132" fg:w="855"/><text x="32.7409%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (855 samples, 0.52%)</title><rect x="32.4909%" y="244" width="0.5228%" height="15" fill="rgb(211,146,34)" fg:x="53132" fg:w="855"/><text x="32.7409%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (855 samples, 0.52%)</title><rect x="32.4909%" y="260" width="0.5228%" height="15" fill="rgb(228,22,38)" fg:x="53132" fg:w="855"/><text x="32.7409%" y="270.50"></text></g><g><title>forward (transformer.py:21) (551 samples, 0.34%)</title><rect x="32.6768%" y="276" width="0.3369%" height="15" fill="rgb(235,168,5)" fg:x="53436" fg:w="551"/><text x="32.9268%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (551 samples, 0.34%)</title><rect x="32.6768%" y="292" width="0.3369%" height="15" fill="rgb(221,155,16)" fg:x="53436" fg:w="551"/><text x="32.9268%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (551 samples, 0.34%)</title><rect x="32.6768%" y="308" width="0.3369%" height="15" fill="rgb(215,215,53)" fg:x="53436" fg:w="551"/><text x="32.9268%" y="318.50"></text></g><g><title>calculate_loss (src/trainers/match.py:21) (702 samples, 0.43%)</title><rect x="33.0137%" y="132" width="0.4293%" height="15" fill="rgb(223,4,10)" fg:x="53987" fg:w="702"/><text x="33.2637%" y="142.50"></text></g><g><title>cross_entropy (torch/nn/functional.py:3479) (566 samples, 0.35%)</title><rect x="33.0969%" y="148" width="0.3461%" height="15" fill="rgb(234,103,6)" fg:x="54123" fg:w="566"/><text x="33.3469%" y="158.50"></text></g><g><title>calculate_loss (src/trainers/match.py:22) (183 samples, 0.11%)</title><rect x="33.4430%" y="132" width="0.1119%" height="15" fill="rgb(227,97,0)" fg:x="54689" fg:w="183"/><text x="33.6930%" y="142.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:140) (44,679 samples, 27.32%)</title><rect x="6.3157%" y="116" width="27.3218%" height="15" fill="rgb(234,150,53)" fg:x="10328" fg:w="44679"/><text x="6.5657%" y="126.50">train_one_epoch (src/trainers/base.py:140)</text></g><g><title>train_one_epoch (src/trainers/base.py:145) (16,446 samples, 10.06%)</title><rect x="33.6399%" y="116" width="10.0569%" height="15" fill="rgb(228,201,54)" fg:x="55011" fg:w="16446"/><text x="33.8899%" y="126.50">train_one_epoch..</text></g><g><title>backward (torch/_tensor.py:581) (16,444 samples, 10.06%)</title><rect x="33.6411%" y="132" width="10.0557%" height="15" fill="rgb(222,22,37)" fg:x="55013" fg:w="16444"/><text x="33.8911%" y="142.50">backward (torch..</text></g><g><title>backward (torch/autograd/__init__.py:347) (16,313 samples, 9.98%)</title><rect x="33.7212%" y="148" width="9.9756%" height="15" fill="rgb(237,53,32)" fg:x="55144" fg:w="16313"/><text x="33.9712%" y="158.50">backward (torc..</text></g><g><title>_engine_run_backward (torch/autograd/graph.py:825) (16,311 samples, 9.97%)</title><rect x="33.7225%" y="164" width="9.9744%" height="15" fill="rgb(233,25,53)" fg:x="55146" fg:w="16311"/><text x="33.9725%" y="174.50">_engine_run_ba..</text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:122) (169 samples, 0.10%)</title><rect x="43.8467%" y="148" width="0.1033%" height="15" fill="rgb(210,40,34)" fg:x="71702" fg:w="169"/><text x="44.0967%" y="158.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:92) (389 samples, 0.24%)</title><rect x="44.0307%" y="148" width="0.2379%" height="15" fill="rgb(241,220,44)" fg:x="72003" fg:w="389"/><text x="44.2807%" y="158.50"></text></g><g><title>&lt;listcomp&gt; (torch/nn/utils/clip_grad.py:92) (389 samples, 0.24%)</title><rect x="44.0307%" y="164" width="0.2379%" height="15" fill="rgb(235,28,35)" fg:x="72003" fg:w="389"/><text x="44.2807%" y="174.50"></text></g><g><title>_no_grad_wrapper (torch/nn/utils/clip_grad.py:30) (1,066 samples, 0.65%)</title><rect x="43.7396%" y="132" width="0.6519%" height="15" fill="rgb(210,56,17)" fg:x="71527" fg:w="1066"/><text x="43.9896%" y="142.50"></text></g><g><title>clip_grad_norm_ (torch/nn/utils/clip_grad.py:95) (177 samples, 0.11%)</title><rect x="44.2833%" y="148" width="0.1082%" height="15" fill="rgb(224,130,29)" fg:x="72416" fg:w="177"/><text x="44.5333%" y="158.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:147) (1,137 samples, 0.70%)</title><rect x="43.6968%" y="116" width="0.6953%" height="15" fill="rgb(235,212,8)" fg:x="71457" fg:w="1137"/><text x="43.9468%" y="126.50"></text></g><g><title>__enter__ (torch/autograd/profiler.py:733) (222 samples, 0.14%)</title><rect x="44.3970%" y="164" width="0.1358%" height="15" fill="rgb(223,33,50)" fg:x="72602" fg:w="222"/><text x="44.6470%" y="174.50"></text></g><g><title>__call__ (torch/_ops.py:1116) (219 samples, 0.13%)</title><rect x="44.3989%" y="180" width="0.1339%" height="15" fill="rgb(219,149,13)" fg:x="72605" fg:w="219"/><text x="44.6489%" y="190.50"></text></g><g><title>wrapper (torch/optim/optimizer.py:472) (233 samples, 0.14%)</title><rect x="44.3952%" y="148" width="0.1425%" height="15" fill="rgb(250,156,29)" fg:x="72599" fg:w="233"/><text x="44.6452%" y="158.50"></text></g><g><title>_init_group (torch/optim/adam.py:135) (234 samples, 0.14%)</title><rect x="44.5805%" y="196" width="0.1431%" height="15" fill="rgb(216,193,19)" fg:x="72902" fg:w="234"/><text x="44.8305%" y="206.50"></text></g><g><title>step (torch/optim/adam.py:213) (280 samples, 0.17%)</title><rect x="44.5578%" y="180" width="0.1712%" height="15" fill="rgb(216,135,14)" fg:x="72865" fg:w="280"/><text x="44.8078%" y="190.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:378) (453 samples, 0.28%)</title><rect x="44.9150%" y="228" width="0.2770%" height="15" fill="rgb(241,47,5)" fg:x="73449" fg:w="453"/><text x="45.1650%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:379) (861 samples, 0.53%)</title><rect x="45.1920%" y="228" width="0.5265%" height="15" fill="rgb(233,42,35)" fg:x="73902" fg:w="861"/><text x="45.4420%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:430) (659 samples, 0.40%)</title><rect x="45.7191%" y="228" width="0.4030%" height="15" fill="rgb(231,13,6)" fg:x="74764" fg:w="659"/><text x="45.9691%" y="238.50"></text></g><g><title>step (torch/optim/adam.py:223) (2,459 samples, 1.50%)</title><rect x="44.7291%" y="180" width="1.5037%" height="15" fill="rgb(207,181,40)" fg:x="73145" fg:w="2459"/><text x="44.9791%" y="190.50"></text></g><g><title>maybe_fallback (torch/optim/optimizer.py:154) (2,443 samples, 1.49%)</title><rect x="44.7389%" y="196" width="1.4939%" height="15" fill="rgb(254,173,49)" fg:x="73161" fg:w="2443"/><text x="44.9889%" y="206.50"></text></g><g><title>adam (torch/optim/adam.py:784) (2,442 samples, 1.49%)</title><rect x="44.7395%" y="212" width="1.4933%" height="15" fill="rgb(221,1,38)" fg:x="73162" fg:w="2442"/><text x="44.9895%" y="222.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:432) (181 samples, 0.11%)</title><rect x="46.1221%" y="228" width="0.1107%" height="15" fill="rgb(206,124,46)" fg:x="75423" fg:w="181"/><text x="46.3721%" y="238.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:148) (3,011 samples, 1.84%)</title><rect x="44.3921%" y="116" width="1.8413%" height="15" fill="rgb(249,21,11)" fg:x="72594" fg:w="3011"/><text x="44.6421%" y="126.50">t..</text></g><g><title>wrapper (torch/optim/lr_scheduler.py:137) (3,009 samples, 1.84%)</title><rect x="44.3933%" y="132" width="1.8400%" height="15" fill="rgb(222,201,40)" fg:x="72596" fg:w="3009"/><text x="44.6433%" y="142.50">w..</text></g><g><title>wrapper (torch/optim/optimizer.py:487) (2,772 samples, 1.70%)</title><rect x="44.5383%" y="148" width="1.6951%" height="15" fill="rgb(235,61,29)" fg:x="72833" fg:w="2772"/><text x="44.7883%" y="158.50"></text></g><g><title>_use_grad (torch/optim/optimizer.py:91) (2,763 samples, 1.69%)</title><rect x="44.5438%" y="164" width="1.6896%" height="15" fill="rgb(219,207,3)" fg:x="72842" fg:w="2763"/><text x="44.7938%" y="174.50"></text></g><g><title>&lt;module&gt; (main.py:78) (75,075 samples, 45.91%)</title><rect x="0.3351%" y="68" width="45.9093%" height="15" fill="rgb(222,56,46)" fg:x="548" fg:w="75075"/><text x="0.5851%" y="78.50">&lt;module&gt; (main.py:78)</text></g><g><title>main (main.py:74) (74,818 samples, 45.75%)</title><rect x="0.4923%" y="84" width="45.7521%" height="15" fill="rgb(239,76,54)" fg:x="805" fg:w="74818"/><text x="0.7423%" y="94.50">main (main.py:74)</text></g><g><title>train (src/trainers/base.py:95) (66,587 samples, 40.72%)</title><rect x="5.5256%" y="100" width="40.7188%" height="15" fill="rgb(231,124,27)" fg:x="9036" fg:w="66587"/><text x="5.7756%" y="110.50">train (src/trainers/base.py:95)</text></g><g><title>_loop_check_status (wandb/sdk/wandb_run.py:235) (184 samples, 0.11%)</title><rect x="46.3159%" y="132" width="0.1125%" height="15" fill="rgb(249,195,6)" fg:x="75740" fg:w="184"/><text x="46.5659%" y="142.50"></text></g><g><title>check_internal_messages (wandb/sdk/wandb_run.py:325) (223 samples, 0.14%)</title><rect x="46.3098%" y="116" width="0.1364%" height="15" fill="rgb(237,174,47)" fg:x="75730" fg:w="223"/><text x="46.5598%" y="126.50"></text></g><g><title>_loop_check_status (wandb/sdk/wandb_run.py:243) (229 samples, 0.14%)</title><rect x="46.4486%" y="132" width="0.1400%" height="15" fill="rgb(206,201,31)" fg:x="75957" fg:w="229"/><text x="46.6986%" y="142.50"></text></g><g><title>check_network_status (wandb/sdk/wandb_run.py:281) (265 samples, 0.16%)</title><rect x="46.4462%" y="116" width="0.1621%" height="15" fill="rgb(231,57,52)" fg:x="75953" fg:w="265"/><text x="46.6962%" y="126.50"></text></g><g><title>_read_packet_bytes (wandb/sdk/lib/sock_client.py:256) (86,800 samples, 53.08%)</title><rect x="46.7043%" y="164" width="53.0793%" height="15" fill="rgb(248,177,22)" fg:x="76375" fg:w="86800"/><text x="46.9543%" y="174.50">_read_packet_bytes (wandb/sdk/lib/sock_client.py:256)</text></g><g><title>read_server_response (wandb/sdk/lib/sock_client.py:285) (86,918 samples, 53.15%)</title><rect x="46.6700%" y="148" width="53.1514%" height="15" fill="rgb(215,211,37)" fg:x="76319" fg:w="86918"/><text x="46.9200%" y="158.50">read_server_response (wandb/sdk/lib/sock_client.py:285)</text></g><g><title>_read_message (wandb/sdk/interface/router_sock.py:27) (86,944 samples, 53.17%)</title><rect x="46.6688%" y="132" width="53.1673%" height="15" fill="rgb(241,128,51)" fg:x="76317" fg:w="86944"/><text x="46.9188%" y="142.50">_read_message (wandb/sdk/interface/router_sock.py:27)</text></g><g><title>message_loop (wandb/sdk/interface/router.py:68) (86,947 samples, 53.17%)</title><rect x="46.6676%" y="116" width="53.1692%" height="15" fill="rgb(227,165,31)" fg:x="76315" fg:w="86947"/><text x="46.9176%" y="126.50">message_loop (wandb/sdk/interface/router.py:68)</text></g><g><title>run (threading.py:982) (87,570 samples, 53.55%)</title><rect x="46.3031%" y="100" width="53.5501%" height="15" fill="rgb(228,167,24)" fg:x="75719" fg:w="87570"/><text x="46.5531%" y="110.50">run (threading.py:982)</text></g><g><title>_bootstrap (threading.py:1002) (87,722 samples, 53.64%)</title><rect x="46.3031%" y="68" width="53.6431%" height="15" fill="rgb(228,143,12)" fg:x="75719" fg:w="87722"/><text x="46.5531%" y="78.50">_bootstrap (threading.py:1002)</text></g><g><title>_bootstrap_inner (threading.py:1045) (87,722 samples, 53.64%)</title><rect x="46.3031%" y="84" width="53.6431%" height="15" fill="rgb(249,149,8)" fg:x="75719" fg:w="87722"/><text x="46.5531%" y="94.50">_bootstrap_inner (threading.py:1045)</text></g><g><title>all (163,529 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="163529"/><text x="0.2500%" y="62.50"></text></g></svg></svg>