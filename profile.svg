<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="458" onload="init(evt)" viewBox="0 0 1200 458" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="458" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python main.py --template draftrec --./data/lol/user_history.npy --use_parallel true</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="447.00"> </text><svg id="frames" x="10" width="1180" total_samples="332912"><g><title>forward (src/models/draftrec.py:122) (3,638 samples, 1.09%)</title><rect x="0.3478%" y="228" width="1.0928%" height="15" fill="rgb(227,0,7)" fg:x="1158" fg:w="3638"/><text x="0.5978%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (4,275 samples, 1.28%)</title><rect x="0.2511%" y="132" width="1.2841%" height="15" fill="rgb(217,0,24)" fg:x="836" fg:w="4275"/><text x="0.5011%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (4,274 samples, 1.28%)</title><rect x="0.2514%" y="148" width="1.2838%" height="15" fill="rgb(221,193,54)" fg:x="837" fg:w="4274"/><text x="0.5014%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (4,274 samples, 1.28%)</title><rect x="0.2514%" y="164" width="1.2838%" height="15" fill="rgb(248,212,6)" fg:x="837" fg:w="4274"/><text x="0.5014%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (4,267 samples, 1.28%)</title><rect x="0.2535%" y="180" width="1.2817%" height="15" fill="rgb(208,68,35)" fg:x="844" fg:w="4267"/><text x="0.5035%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (4,267 samples, 1.28%)</title><rect x="0.2535%" y="196" width="1.2817%" height="15" fill="rgb(232,128,0)" fg:x="844" fg:w="4267"/><text x="0.5035%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (4,267 samples, 1.28%)</title><rect x="0.2535%" y="212" width="1.2817%" height="15" fill="rgb(207,160,47)" fg:x="844" fg:w="4267"/><text x="0.5035%" y="222.50"></text></g><g><title>_tie_averaged_dcg (sklearn/metrics/_ranking.py:1565) (417 samples, 0.13%)</title><rect x="1.5839%" y="260" width="0.1253%" height="15" fill="rgb(228,23,34)" fg:x="5273" fg:w="417"/><text x="1.8339%" y="270.50"></text></g><g><title>unique (numpy/lib/_arraysetops_impl.py:291) (397 samples, 0.12%)</title><rect x="1.5899%" y="276" width="0.1193%" height="15" fill="rgb(218,30,26)" fg:x="5293" fg:w="397"/><text x="1.8399%" y="286.50"></text></g><g><title>_ndcg_sample_scores (sklearn/metrics/_ranking.py:1749) (644 samples, 0.19%)</title><rect x="1.5794%" y="212" width="0.1934%" height="15" fill="rgb(220,122,19)" fg:x="5258" fg:w="644"/><text x="1.8294%" y="222.50"></text></g><g><title>_dcg_sample_scores (sklearn/metrics/_ranking.py:1520) (644 samples, 0.19%)</title><rect x="1.5794%" y="228" width="0.1934%" height="15" fill="rgb(250,228,42)" fg:x="5258" fg:w="644"/><text x="1.8294%" y="238.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/metrics/_ranking.py:1521) (639 samples, 0.19%)</title><rect x="1.5809%" y="244" width="0.1919%" height="15" fill="rgb(240,193,28)" fg:x="5263" fg:w="639"/><text x="1.8309%" y="254.50"></text></g><g><title>ndcg_score (sklearn/metrics/_ranking.py:1876) (677 samples, 0.20%)</title><rect x="1.5794%" y="196" width="0.2034%" height="15" fill="rgb(216,20,37)" fg:x="5258" fg:w="677"/><text x="1.8294%" y="206.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:50) (799 samples, 0.24%)</title><rect x="1.5431%" y="132" width="0.2400%" height="15" fill="rgb(206,188,39)" fg:x="5137" fg:w="799"/><text x="1.7931%" y="142.50"></text></g><g><title>get_recommendation_metrics_for_ks (src/common/metrics.py:103) (708 samples, 0.21%)</title><rect x="1.5704%" y="148" width="0.2127%" height="15" fill="rgb(217,207,13)" fg:x="5228" fg:w="708"/><text x="1.8204%" y="158.50"></text></g><g><title>ndcg_at_k (src/common/metrics.py:93) (706 samples, 0.21%)</title><rect x="1.5710%" y="164" width="0.2121%" height="15" fill="rgb(231,73,38)" fg:x="5230" fg:w="706"/><text x="1.8210%" y="174.50"></text></g><g><title>wrapper (sklearn/utils/_param_validation.py:213) (692 samples, 0.21%)</title><rect x="1.5752%" y="180" width="0.2079%" height="15" fill="rgb(225,20,46)" fg:x="5244" fg:w="692"/><text x="1.8252%" y="190.50"></text></g><g><title>validate (src/trainers/base.py:177) (5,102 samples, 1.53%)</title><rect x="0.2511%" y="116" width="1.5325%" height="15" fill="rgb(210,31,41)" fg:x="836" fg:w="5102"/><text x="0.5011%" y="126.50"></text></g><g><title>train (src/trainers/base.py:116) (5,270 samples, 1.58%)</title><rect x="0.2016%" y="100" width="1.5830%" height="15" fill="rgb(221,200,47)" fg:x="671" fg:w="5270"/><text x="0.4516%" y="110.50"></text></g><g><title>forward (src/models/draftrec.py:122) (1,305 samples, 0.39%)</title><rect x="1.8356%" y="228" width="0.3920%" height="15" fill="rgb(226,26,5)" fg:x="6111" fg:w="1305"/><text x="2.0856%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,558 samples, 0.47%)</title><rect x="1.8050%" y="132" width="0.4680%" height="15" fill="rgb(249,33,26)" fg:x="6009" fg:w="1558"/><text x="2.0550%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,558 samples, 0.47%)</title><rect x="1.8050%" y="148" width="0.4680%" height="15" fill="rgb(235,183,28)" fg:x="6009" fg:w="1558"/><text x="2.0550%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,558 samples, 0.47%)</title><rect x="1.8050%" y="164" width="0.4680%" height="15" fill="rgb(221,5,38)" fg:x="6009" fg:w="1558"/><text x="2.0550%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,558 samples, 0.47%)</title><rect x="1.8050%" y="180" width="0.4680%" height="15" fill="rgb(247,18,42)" fg:x="6009" fg:w="1558"/><text x="2.0550%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,558 samples, 0.47%)</title><rect x="1.8050%" y="196" width="0.4680%" height="15" fill="rgb(241,131,45)" fg:x="6009" fg:w="1558"/><text x="2.0550%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,558 samples, 0.47%)</title><rect x="1.8050%" y="212" width="0.4680%" height="15" fill="rgb(249,31,29)" fg:x="6009" fg:w="1558"/><text x="2.0550%" y="222.50"></text></g><g><title>train (src/trainers/base.py:86) (1,951 samples, 0.59%)</title><rect x="1.7849%" y="100" width="0.5860%" height="15" fill="rgb(225,111,53)" fg:x="5942" fg:w="1951"/><text x="2.0349%" y="110.50"></text></g><g><title>validate (src/trainers/base.py:177) (1,884 samples, 0.57%)</title><rect x="1.8050%" y="116" width="0.5659%" height="15" fill="rgb(238,160,17)" fg:x="6009" fg:w="1884"/><text x="2.0550%" y="126.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:130) (1,097 samples, 0.33%)</title><rect x="2.4268%" y="116" width="0.3295%" height="15" fill="rgb(214,148,48)" fg:x="8079" fg:w="1097"/><text x="2.6768%" y="126.50"></text></g><g><title>&lt;dictcomp&gt; (src/trainers/base.py:130) (1,097 samples, 0.33%)</title><rect x="2.4268%" y="132" width="0.3295%" height="15" fill="rgb(232,36,49)" fg:x="8079" fg:w="1097"/><text x="2.6768%" y="142.50"></text></g><g><title>forward (transformer.py:20) (380 samples, 0.11%)</title><rect x="3.0104%" y="276" width="0.1141%" height="15" fill="rgb(209,103,24)" fg:x="10022" fg:w="380"/><text x="3.2604%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (380 samples, 0.11%)</title><rect x="3.0104%" y="292" width="0.1141%" height="15" fill="rgb(229,88,8)" fg:x="10022" fg:w="380"/><text x="3.2604%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (377 samples, 0.11%)</title><rect x="3.0113%" y="308" width="0.1132%" height="15" fill="rgb(213,181,19)" fg:x="10025" fg:w="377"/><text x="3.2613%" y="318.50"></text></g><g><title>forward (transformer.py:78) (344 samples, 0.10%)</title><rect x="3.2132%" y="372" width="0.1033%" height="15" fill="rgb(254,191,54)" fg:x="10697" fg:w="344"/><text x="3.4632%" y="382.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (344 samples, 0.10%)</title><rect x="3.2132%" y="388" width="0.1033%" height="15" fill="rgb(241,83,37)" fg:x="10697" fg:w="344"/><text x="3.4632%" y="398.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (342 samples, 0.10%)</title><rect x="3.2138%" y="404" width="0.1027%" height="15" fill="rgb(233,36,39)" fg:x="10699" fg:w="342"/><text x="3.4638%" y="414.50"></text></g><g><title>forward (layers.py:32) (342 samples, 0.10%)</title><rect x="3.2138%" y="420" width="0.1027%" height="15" fill="rgb(226,3,54)" fg:x="10699" fg:w="342"/><text x="3.4638%" y="430.50"></text></g><g><title>forward (layers.py:57) (822 samples, 0.25%)</title><rect x="3.1248%" y="324" width="0.2469%" height="15" fill="rgb(245,192,40)" fg:x="10403" fg:w="822"/><text x="3.3748%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (822 samples, 0.25%)</title><rect x="3.1248%" y="340" width="0.2469%" height="15" fill="rgb(238,167,29)" fg:x="10403" fg:w="822"/><text x="3.3748%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (820 samples, 0.25%)</title><rect x="3.1255%" y="356" width="0.2463%" height="15" fill="rgb(232,182,51)" fg:x="10405" fg:w="820"/><text x="3.3755%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:115) (1,230 samples, 0.37%)</title><rect x="3.0104%" y="228" width="0.3695%" height="15" fill="rgb(231,60,39)" fg:x="10022" fg:w="1230"/><text x="3.2604%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,230 samples, 0.37%)</title><rect x="3.0104%" y="244" width="0.3695%" height="15" fill="rgb(208,69,12)" fg:x="10022" fg:w="1230"/><text x="3.2604%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,230 samples, 0.37%)</title><rect x="3.0104%" y="260" width="0.3695%" height="15" fill="rgb(235,93,37)" fg:x="10022" fg:w="1230"/><text x="3.2604%" y="270.50"></text></g><g><title>forward (transformer.py:21) (850 samples, 0.26%)</title><rect x="3.1245%" y="276" width="0.2553%" height="15" fill="rgb(213,116,39)" fg:x="10402" fg:w="850"/><text x="3.3745%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (849 samples, 0.26%)</title><rect x="3.1248%" y="292" width="0.2550%" height="15" fill="rgb(222,207,29)" fg:x="10403" fg:w="849"/><text x="3.3748%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (849 samples, 0.26%)</title><rect x="3.1248%" y="308" width="0.2550%" height="15" fill="rgb(206,96,30)" fg:x="10403" fg:w="849"/><text x="3.3748%" y="318.50"></text></g><g><title>forward (src/models/draftrec.py:122) (84,387 samples, 25.35%)</title><rect x="3.3961%" y="228" width="25.3481%" height="15" fill="rgb(218,138,4)" fg:x="11306" fg:w="84387"/><text x="3.6461%" y="238.50">forward (src/models/draftrec.py:122)</text></g><g><title>forward (src/models/heads/__init__.py:33) (369 samples, 0.11%)</title><rect x="29.0329%" y="276" width="0.1108%" height="15" fill="rgb(250,191,14)" fg:x="96654" fg:w="369"/><text x="29.2829%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (368 samples, 0.11%)</title><rect x="29.0332%" y="292" width="0.1105%" height="15" fill="rgb(239,60,40)" fg:x="96655" fg:w="368"/><text x="29.2832%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (368 samples, 0.11%)</title><rect x="29.0332%" y="308" width="0.1105%" height="15" fill="rgb(206,27,48)" fg:x="96655" fg:w="368"/><text x="29.2832%" y="318.50"></text></g><g><title>forward (torch/nn/modules/container.py:250) (367 samples, 0.11%)</title><rect x="29.0335%" y="324" width="0.1102%" height="15" fill="rgb(225,35,8)" fg:x="96656" fg:w="367"/><text x="29.2835%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (367 samples, 0.11%)</title><rect x="29.0335%" y="340" width="0.1102%" height="15" fill="rgb(250,213,24)" fg:x="96656" fg:w="367"/><text x="29.2835%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (366 samples, 0.11%)</title><rect x="29.0338%" y="356" width="0.1099%" height="15" fill="rgb(247,123,22)" fg:x="96657" fg:w="366"/><text x="29.2838%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:130) (837 samples, 0.25%)</title><rect x="29.0122%" y="228" width="0.2514%" height="15" fill="rgb(231,138,38)" fg:x="96585" fg:w="837"/><text x="29.2622%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (828 samples, 0.25%)</title><rect x="29.0149%" y="244" width="0.2487%" height="15" fill="rgb(231,145,46)" fg:x="96594" fg:w="828"/><text x="29.2649%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (770 samples, 0.23%)</title><rect x="29.0323%" y="260" width="0.2313%" height="15" fill="rgb(251,118,11)" fg:x="96652" fg:w="770"/><text x="29.2823%" y="270.50"></text></g><g><title>forward (src/models/draftrec.py:132) (396 samples, 0.12%)</title><rect x="29.2636%" y="228" width="0.1190%" height="15" fill="rgb(217,147,25)" fg:x="97422" fg:w="396"/><text x="29.5136%" y="238.50"></text></g><g><title>forward (layers.py:57) (351 samples, 0.11%)</title><rect x="29.5721%" y="324" width="0.1054%" height="15" fill="rgb(247,81,37)" fg:x="98449" fg:w="351"/><text x="29.8221%" y="334.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (350 samples, 0.11%)</title><rect x="29.5724%" y="340" width="0.1051%" height="15" fill="rgb(209,12,38)" fg:x="98450" fg:w="350"/><text x="29.8224%" y="350.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (350 samples, 0.11%)</title><rect x="29.5724%" y="356" width="0.1051%" height="15" fill="rgb(227,1,9)" fg:x="98450" fg:w="350"/><text x="29.8224%" y="366.50"></text></g><g><title>forward (src/models/draftrec.py:97) (657 samples, 0.20%)</title><rect x="29.5099%" y="228" width="0.1973%" height="15" fill="rgb(248,47,43)" fg:x="98242" fg:w="657"/><text x="29.7599%" y="238.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (657 samples, 0.20%)</title><rect x="29.5099%" y="244" width="0.1973%" height="15" fill="rgb(221,10,30)" fg:x="98242" fg:w="657"/><text x="29.7599%" y="254.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (656 samples, 0.20%)</title><rect x="29.5102%" y="260" width="0.1970%" height="15" fill="rgb(210,229,1)" fg:x="98243" fg:w="656"/><text x="29.7602%" y="270.50"></text></g><g><title>forward (transformer.py:21) (450 samples, 0.14%)</title><rect x="29.5721%" y="276" width="0.1352%" height="15" fill="rgb(222,148,37)" fg:x="98449" fg:w="450"/><text x="29.8221%" y="286.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (450 samples, 0.14%)</title><rect x="29.5721%" y="292" width="0.1352%" height="15" fill="rgb(234,67,33)" fg:x="98449" fg:w="450"/><text x="29.8221%" y="302.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (450 samples, 0.14%)</title><rect x="29.5721%" y="308" width="0.1352%" height="15" fill="rgb(247,98,35)" fg:x="98449" fg:w="450"/><text x="29.8221%" y="318.50"></text></g><g><title>calculate_loss (src/trainers/match.py:19) (89,393 samples, 26.85%)</title><rect x="2.8569%" y="132" width="26.8518%" height="15" fill="rgb(247,138,52)" fg:x="9511" fg:w="89393"/><text x="3.1069%" y="142.50">calculate_loss (src/trainers/match.py:19)</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (89,393 samples, 26.85%)</title><rect x="2.8569%" y="148" width="26.8518%" height="15" fill="rgb(213,79,30)" fg:x="9511" fg:w="89393"/><text x="3.1069%" y="158.50">_wrapped_call_impl (torch/nn/modules/module..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (89,389 samples, 26.85%)</title><rect x="2.8581%" y="164" width="26.8506%" height="15" fill="rgb(246,177,23)" fg:x="9515" fg:w="89389"/><text x="3.1081%" y="174.50">_call_impl (torch/nn/modules/module.py:1747)</text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (89,150 samples, 26.78%)</title><rect x="2.9299%" y="180" width="26.7788%" height="15" fill="rgb(230,62,27)" fg:x="9754" fg:w="89150"/><text x="3.1799%" y="190.50">forward (torch/nn/parallel/data_parallel.py..</text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (89,150 samples, 26.78%)</title><rect x="2.9299%" y="196" width="26.7788%" height="15" fill="rgb(216,154,8)" fg:x="9754" fg:w="89150"/><text x="3.1799%" y="206.50">_wrapped_call_impl (torch/nn/modules/module..</text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (89,150 samples, 26.78%)</title><rect x="2.9299%" y="212" width="26.7788%" height="15" fill="rgb(244,35,45)" fg:x="9754" fg:w="89150"/><text x="3.1799%" y="222.50">_call_impl (torch/nn/modules/module.py:1747)</text></g><g><title>cross_entropy (torch/nn/functional.py:3479) (367 samples, 0.11%)</title><rect x="29.7229%" y="148" width="0.1102%" height="15" fill="rgb(251,115,12)" fg:x="98951" fg:w="367"/><text x="29.9729%" y="158.50"></text></g><g><title>calculate_loss (src/trainers/match.py:21) (418 samples, 0.13%)</title><rect x="29.7088%" y="132" width="0.1256%" height="15" fill="rgb(240,54,50)" fg:x="98904" fg:w="418"/><text x="29.9588%" y="142.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:133) (90,301 samples, 27.12%)</title><rect x="2.7611%" y="116" width="27.1246%" height="15" fill="rgb(233,84,52)" fg:x="9192" fg:w="90301"/><text x="3.0111%" y="126.50">train_one_epoch (src/trainers/base.py:133)</text></g><g><title>train_one_epoch (src/trainers/base.py:138) (50,005 samples, 15.02%)</title><rect x="29.8899%" y="116" width="15.0205%" height="15" fill="rgb(207,117,47)" fg:x="99507" fg:w="50005"/><text x="30.1399%" y="126.50">train_one_epoch (src/tr..</text></g><g><title>backward (torch/_tensor.py:581) (49,999 samples, 15.02%)</title><rect x="29.8917%" y="132" width="15.0187%" height="15" fill="rgb(249,43,39)" fg:x="99513" fg:w="49999"/><text x="30.1417%" y="142.50">backward (torch/_tensor..</text></g><g><title>backward (torch/autograd/__init__.py:347) (49,897 samples, 14.99%)</title><rect x="29.9223%" y="148" width="14.9880%" height="15" fill="rgb(209,38,44)" fg:x="99615" fg:w="49897"/><text x="30.1723%" y="158.50">backward (torch/autogra..</text></g><g><title>_engine_run_backward (torch/autograd/graph.py:825) (49,895 samples, 14.99%)</title><rect x="29.9229%" y="164" width="14.9874%" height="15" fill="rgb(236,212,23)" fg:x="99617" fg:w="49895"/><text x="30.1729%" y="174.50">_engine_run_backward (t..</text></g><g><title>_no_grad_wrapper (torch/nn/utils/clip_grad.py:30) (1,003 samples, 0.30%)</title><rect x="44.9302%" y="132" width="0.3013%" height="15" fill="rgb(242,79,21)" fg:x="149578" fg:w="1003"/><text x="45.1802%" y="142.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:140) (1,064 samples, 0.32%)</title><rect x="44.9122%" y="116" width="0.3196%" height="15" fill="rgb(211,96,35)" fg:x="149518" fg:w="1064"/><text x="45.1622%" y="126.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:378) (3,209 samples, 0.96%)</title><rect x="45.3573%" y="228" width="0.9639%" height="15" fill="rgb(253,215,40)" fg:x="151000" fg:w="3209"/><text x="45.6073%" y="238.50"></text></g><g><title>_single_tensor_adam (torch/optim/adam.py:379) (774 samples, 0.23%)</title><rect x="46.3213%" y="228" width="0.2325%" height="15" fill="rgb(211,81,21)" fg:x="154209" fg:w="774"/><text x="46.5713%" y="238.50"></text></g><g><title>train_one_epoch (src/trainers/base.py:141) (4,847 samples, 1.46%)</title><rect x="45.2318%" y="116" width="1.4559%" height="15" fill="rgb(208,190,38)" fg:x="150582" fg:w="4847"/><text x="45.4818%" y="126.50"></text></g><g><title>wrapper (torch/optim/lr_scheduler.py:137) (4,837 samples, 1.45%)</title><rect x="45.2348%" y="132" width="1.4529%" height="15" fill="rgb(235,213,38)" fg:x="150592" fg:w="4837"/><text x="45.4848%" y="142.50"></text></g><g><title>wrapper (torch/optim/optimizer.py:487) (4,679 samples, 1.41%)</title><rect x="45.2822%" y="148" width="1.4055%" height="15" fill="rgb(237,122,38)" fg:x="150750" fg:w="4679"/><text x="45.5322%" y="158.50"></text></g><g><title>_use_grad (torch/optim/optimizer.py:91) (4,656 samples, 1.40%)</title><rect x="45.2891%" y="164" width="1.3986%" height="15" fill="rgb(244,218,35)" fg:x="150773" fg:w="4656"/><text x="45.5391%" y="174.50"></text></g><g><title>step (torch/optim/adam.py:223) (4,616 samples, 1.39%)</title><rect x="45.3012%" y="180" width="1.3866%" height="15" fill="rgb(240,68,47)" fg:x="150813" fg:w="4616"/><text x="45.5512%" y="190.50"></text></g><g><title>maybe_fallback (torch/optim/optimizer.py:154) (4,616 samples, 1.39%)</title><rect x="45.3012%" y="196" width="1.3866%" height="15" fill="rgb(210,16,53)" fg:x="150813" fg:w="4616"/><text x="45.5512%" y="206.50"></text></g><g><title>adam (torch/optim/adam.py:784) (4,616 samples, 1.39%)</title><rect x="45.3012%" y="212" width="1.3866%" height="15" fill="rgb(235,124,12)" fg:x="150813" fg:w="4616"/><text x="45.5512%" y="222.50"></text></g><g><title>train (src/trainers/base.py:91) (147,572 samples, 44.33%)</title><rect x="2.3709%" y="100" width="44.3276%" height="15" fill="rgb(224,169,11)" fg:x="7893" fg:w="147572"/><text x="2.6209%" y="110.50">train (src/trainers/base.py:91)</text></g><g><title>forward (src/models/draftrec.py:122) (1,519 samples, 0.46%)</title><rect x="46.7931%" y="228" width="0.4563%" height="15" fill="rgb(250,166,2)" fg:x="155780" fg:w="1519"/><text x="47.0431%" y="238.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:36) (1,836 samples, 0.55%)</title><rect x="46.7349%" y="132" width="0.5515%" height="15" fill="rgb(242,216,29)" fg:x="155586" fg:w="1836"/><text x="46.9849%" y="142.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,836 samples, 0.55%)</title><rect x="46.7349%" y="148" width="0.5515%" height="15" fill="rgb(230,116,27)" fg:x="155586" fg:w="1836"/><text x="46.9849%" y="158.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,831 samples, 0.55%)</title><rect x="46.7364%" y="164" width="0.5500%" height="15" fill="rgb(228,99,48)" fg:x="155591" fg:w="1831"/><text x="46.9864%" y="174.50"></text></g><g><title>forward (torch/nn/parallel/data_parallel.py:173) (1,830 samples, 0.55%)</title><rect x="46.7367%" y="180" width="0.5497%" height="15" fill="rgb(253,11,6)" fg:x="155592" fg:w="1830"/><text x="46.9867%" y="190.50"></text></g><g><title>_wrapped_call_impl (torch/nn/modules/module.py:1736) (1,830 samples, 0.55%)</title><rect x="46.7367%" y="196" width="0.5497%" height="15" fill="rgb(247,143,39)" fg:x="155592" fg:w="1830"/><text x="46.9867%" y="206.50"></text></g><g><title>_call_impl (torch/nn/modules/module.py:1747) (1,830 samples, 0.55%)</title><rect x="46.7367%" y="212" width="0.5497%" height="15" fill="rgb(236,97,10)" fg:x="155592" fg:w="1830"/><text x="46.9867%" y="222.50"></text></g><g><title>calculate_metrics (src/trainers/match.py:50) (361 samples, 0.11%)</title><rect x="47.2885%" y="132" width="0.1084%" height="15" fill="rgb(233,208,19)" fg:x="157429" fg:w="361"/><text x="47.5385%" y="142.50"></text></g><g><title>validate (src/trainers/base.py:177) (2,206 samples, 0.66%)</title><rect x="46.7349%" y="116" width="0.6626%" height="15" fill="rgb(216,164,2)" fg:x="155586" fg:w="2206"/><text x="46.9849%" y="126.50"></text></g><g><title>&lt;module&gt; (main.py:79) (157,438 samples, 47.29%)</title><rect x="0.1072%" y="68" width="47.2912%" height="15" fill="rgb(220,129,5)" fg:x="357" fg:w="157438"/><text x="0.3572%" y="78.50">&lt;module&gt; (main.py:79)</text></g><g><title>main (main.py:75) (157,177 samples, 47.21%)</title><rect x="0.1856%" y="84" width="47.2128%" height="15" fill="rgb(242,17,10)" fg:x="618" fg:w="157177"/><text x="0.4356%" y="94.50">main (main.py:75)</text></g><g><title>train (src/trainers/base.py:96) (2,330 samples, 0.70%)</title><rect x="46.6985%" y="100" width="0.6999%" height="15" fill="rgb(242,107,0)" fg:x="155465" fg:w="2330"/><text x="46.9485%" y="110.50"></text></g><g><title>check_internal_messages (wandb/sdk/wandb_run.py:325) (365 samples, 0.11%)</title><rect x="47.4182%" y="116" width="0.1096%" height="15" fill="rgb(251,28,31)" fg:x="157861" fg:w="365"/><text x="47.6682%" y="126.50"></text></g><g><title>_loop_check_status (wandb/sdk/wandb_run.py:243) (353 samples, 0.11%)</title><rect x="47.5285%" y="132" width="0.1060%" height="15" fill="rgb(233,223,10)" fg:x="158228" fg:w="353"/><text x="47.7785%" y="142.50"></text></g><g><title>check_network_status (wandb/sdk/wandb_run.py:281) (438 samples, 0.13%)</title><rect x="47.5279%" y="116" width="0.1316%" height="15" fill="rgb(215,21,27)" fg:x="158226" fg:w="438"/><text x="47.7779%" y="126.50"></text></g><g><title>_read_packet_bytes (wandb/sdk/lib/sock_client.py:256) (173,210 samples, 52.03%)</title><rect x="47.7766%" y="164" width="52.0288%" height="15" fill="rgb(232,23,21)" fg:x="159054" fg:w="173210"/><text x="48.0266%" y="174.50">_read_packet_bytes (wandb/sdk/lib/sock_client.py:256)</text></g><g><title>read_server_response (wandb/sdk/lib/sock_client.py:285) (173,492 samples, 52.11%)</title><rect x="47.7327%" y="148" width="52.1135%" height="15" fill="rgb(244,5,23)" fg:x="158908" fg:w="173492"/><text x="47.9827%" y="158.50">read_server_response (wandb/sdk/lib/sock_client.py:285)</text></g><g><title>_read_message (wandb/sdk/interface/router_sock.py:27) (173,534 samples, 52.13%)</title><rect x="47.7285%" y="132" width="52.1261%" height="15" fill="rgb(226,81,46)" fg:x="158894" fg:w="173534"/><text x="47.9785%" y="142.50">_read_message (wandb/sdk/interface/router_sock.py:27)</text></g><g><title>message_loop (wandb/sdk/interface/router.py:68) (173,543 samples, 52.13%)</title><rect x="47.7267%" y="116" width="52.1288%" height="15" fill="rgb(247,70,30)" fg:x="158888" fg:w="173543"/><text x="47.9767%" y="126.50">message_loop (wandb/sdk/interface/router.py:68)</text></g><g><title>run (threading.py:982) (174,683 samples, 52.47%)</title><rect x="47.4152%" y="100" width="52.4712%" height="15" fill="rgb(212,68,19)" fg:x="157851" fg:w="174683"/><text x="47.6652%" y="110.50">run (threading.py:982)</text></g><g><title>_bootstrap (threading.py:1002) (174,876 samples, 52.53%)</title><rect x="47.4152%" y="68" width="52.5292%" height="15" fill="rgb(240,187,13)" fg:x="157851" fg:w="174876"/><text x="47.6652%" y="78.50">_bootstrap (threading.py:1002)</text></g><g><title>_bootstrap_inner (threading.py:1045) (174,876 samples, 52.53%)</title><rect x="47.4152%" y="84" width="52.5292%" height="15" fill="rgb(223,113,26)" fg:x="157851" fg:w="174876"/><text x="47.6652%" y="94.50">_bootstrap_inner (threading.py:1045)</text></g><g><title>all (332,912 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="332912"/><text x="0.2500%" y="62.50"></text></g></svg></svg>